{
  "address": "0x7746898067864b0cd3F3FfB3693c4Ec6A715b5E4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rescueDelay",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC20",
          "name": "_accessToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSecret",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSecretHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimelockNotExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimelockTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "XCMBridgeNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsRescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "SwapCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "SwapCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "SwapCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TIMELOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "canCancel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "cancelSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "completeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        }
      ],
      "name": "createNativeSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        }
      ],
      "name": "createSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "getSwap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "secretHash",
              "type": "bytes32"
            },
            {
              "internalType": "address payable",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "enum DotFusionPolkadotEscrow.SwapState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "swapId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "isNative",
              "type": "bool"
            }
          ],
          "internalType": "struct DotFusionPolkadotEscrow.Swap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "isValidSecret",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "propagateSecretToEthereum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "publicCancelSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "receiveSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xcmBridge",
          "type": "address"
        }
      ],
      "name": "setXCMBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "taker",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "enum DotFusionPolkadotEscrow.SwapState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isNative",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xcmBridge",
      "outputs": [
        {
          "internalType": "contract DotFusionXCMBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbcaa6c9567255d690ad6a2869dc6582709421fc293e111a19d251ba89598e558",
  "receipt": {
    "to": null,
    "from": "0x62206414DdE41446A0fa8eF6c6e93b9AAd9413ab",
    "contractAddress": "0x7746898067864b0cd3F3FfB3693c4Ec6A715b5E4",
    "transactionIndex": 77,
    "gasUsed": "1610953",
    "logsBloom": "0x
    "blockHash": "0x23cd7eb49060bddcf12f0fdc5cb04b02287d0d52f71109a93ce484377f71d31d",
    "transactionHash": "0xbcaa6c9567255d690ad6a2869dc6582709421fc293e111a19d251ba89598e558",
    "logs": [],
    "blockNumber": 9438872,
    "cumulativeGasUsed": "8894468",
    "status": 1,
    "byzantium": true
  },
  "args": [
    604800,
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "2253f14f9c5ba2e897770faa462c7bec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rescueDelay\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_accessToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSecret\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSecretHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimelockNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimelockTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"XCMBridgeNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"SwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"SwapCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"SwapCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TIMELOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"canCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"completeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"createNativeSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"createSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"getSwap\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum DotFusionPolkadotEscrow.SwapState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"internalType\":\"struct DotFusionPolkadotEscrow.Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"isValidSecret\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"propagateSecretToEthereum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"publicCancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"receiveSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xcmBridge\",\"type\":\"address\"}],\"name\":\"setXCMBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum DotFusionPolkadotEscrow.SwapState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xcmBridge\",\"outputs\":[{\"internalType\":\"contract DotFusionXCMBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"security@dotfusion.io\",\"details\":\"This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId. Funds are locked when users initiate swaps, and unlocked when secrets are revealed.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"canCancel(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"},\"returns\":{\"_0\":\"canCancel True if timelock expired and swap is still open\"}},\"cancelSwap(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"}},\"completeSwap(bytes32,bytes32,address)\":{\"details\":\"Only the maker (original initiator on Ethereum) can claim to prevent front-running\",\"params\":{\"secret\":\"Preimage of secretHash\",\"swapId\":\"Unique swap identifier\",\"target\":\"Address to receive the tokens\"}},\"createNativeSwap(bytes32,bytes32,address,uint256)\":{\"params\":{\"maker\":\"Address of the maker (Ethereum initiator)\",\"secretHash\":\"Hash of the secret\",\"swapId\":\"Unique identifier for this swap\",\"timelock\":\"Duration before cancellation is allowed\"}},\"createSwap(bytes32,bytes32,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens\",\"maker\":\"Address of the maker\",\"secretHash\":\"Hash of the secret\",\"swapId\":\"Unique identifier for this swap\",\"timelock\":\"Duration before cancellation is allowed\",\"token\":\"Token to be swapped\"}},\"getSwap(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"},\"returns\":{\"swap\":\"Full swap struct\"}},\"isValidSecret(bytes32,bytes32)\":{\"params\":{\"secret\":\"Preimage to test\",\"swapId\":\"Unique swap identifier\"},\"returns\":{\"_0\":\"isValid True if secret matches secretHash\"}},\"propagateSecretToEthereum(bytes32,bytes32)\":{\"details\":\"This can be called if automatic propagation failed\",\"params\":{\"secret\":\"Revealed secret\",\"swapId\":\"Swap identifier\"}},\"publicCancelSwap(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"}},\"receiveSwap(bytes32,bytes32,address,uint256,bytes32)\":{\"details\":\"Called by the XCM bridge contract for backward compatibilityOther parameters are present for compatibility but not used\",\"params\":{\"secretHash\":\"Hash of the secret\",\"swapId\":\"Unique swap identifier (from Ethereum)\"}},\"rescueFunds(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"}},\"setXCMBridge(address)\":{\"params\":{\"_xcmBridge\":\"Address of the XCM bridge contract\"}}},\"title\":\"DotFusion Polkadot Escrow (Destination)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canCancel(bytes32)\":{\"notice\":\"Check if swap can be cancelled\"},\"cancelSwap(bytes32)\":{\"notice\":\"Cancel a swap after timelock expires\"},\"completeSwap(bytes32,bytes32,address)\":{\"notice\":\"Complete a swap by revealing the secret\"},\"createNativeSwap(bytes32,bytes32,address,uint256)\":{\"notice\":\"Create a new swap with native DOT\"},\"createSwap(bytes32,bytes32,address,address,uint256,uint256)\":{\"notice\":\"Create a new swap with ERC20 tokens\"},\"getSwap(bytes32)\":{\"notice\":\"Get swap details\"},\"isValidSecret(bytes32,bytes32)\":{\"notice\":\"Check if secret is valid for a swap\"},\"propagateSecretToEthereum(bytes32,bytes32)\":{\"notice\":\"Manually propagate secret to Ethereum via XCM bridge\"},\"publicCancelSwap(bytes32)\":{\"notice\":\"Public cancellation function (for access token holders)\"},\"receiveSwap(bytes32,bytes32,address,uint256,bytes32)\":{\"notice\":\"Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)\"},\"rescueFunds(bytes32)\":{\"notice\":\"Rescue funds from a swap after rescue delay\"},\"setXCMBridge(address)\":{\"notice\":\"Set the XCM bridge address\"}},\"notice\":\"Destination escrow contract for cross-chain atomic swaps on Polkadot\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolkadotEscrow.sol\":\"DotFusionPolkadotEscrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/PolkadotEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { DotFusionXCMBridge } from \\\"./XCMBridge.sol\\\";\\n\\n/**\\n * @title DotFusion Polkadot Escrow (Destination)\\n * @notice Destination escrow contract for cross-chain atomic swaps on Polkadot\\n * @dev This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId.\\n * Funds are locked when users initiate swaps, and unlocked when secrets are revealed.\\n * @custom:security-contact security@dotfusion.io\\n */\\ncontract DotFusionPolkadotEscrow is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                              TYPES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    enum SwapState {\\n        INVALID,\\n        OPEN,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n    \\n    struct Swap {\\n        bytes32 secretHash;           // Hash of the secret (preimage)\\n        address payable maker;        // User who initiated the swap\\n        address payable taker;        // User who will complete the swap\\n        IERC20 token;                 // Token being swapped (address(0) for native DOT)\\n        uint256 amount;               // Amount of tokens or native DOT\\n        uint256 safetyDeposit;        // ETH safety deposit (unused for native DOT swaps)\\n        uint256 unlockTime;           // When swap can be cancelled\\n        SwapState state;              // Current swap state\\n        bytes32 swapId;               // Unique swap identifier\\n        bool isNative;                // True if this is a native DOT swap\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            STORAGE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    mapping(bytes32 => Swap) public swaps;\\n\\n    // Owner and rescue delays\\n    address public immutable owner;\\n    uint32 public immutable rescueDelay;\\n    IERC20 public immutable accessToken;\\n    \\n    // XCM Bridge integration\\n    DotFusionXCMBridge public xcmBridge;\\n\\n    // Maximum timelock to ensure T_dot < T_eth (recommended: 6 hours)\\n    // This ensures the Polkadot side expires before Ethereum side\\n    uint256 public constant MAX_TIMELOCK = 6 hours;\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event SwapCreated(\\n        bytes32 indexed swapId,\\n        bytes32 indexed secretHash,\\n        address indexed maker,\\n        address taker,\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n    \\n    event SwapCompleted(\\n        bytes32 indexed swapId,\\n        bytes32 secret\\n    );\\n    \\n    event SwapCancelled(\\n        bytes32 indexed swapId\\n    );\\n    \\n    event FundsRescued(\\n        bytes32 indexed swapId,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    error SwapAlreadyExists();\\n    error SwapDoesNotExist();\\n    error InvalidSecretHash();\\n    error InvalidAmount();\\n    error InvalidSecret();\\n    error SwapNotOpen();\\n    error TimelockNotExpired();\\n    error Unauthorized();\\n    error TransferFailed();\\n    error InvalidParameters();\\n    error TimelockTooLong();\\n    error XCMBridgeNotSet();\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            MODIFIERS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyAccessTokenHolder() {\\n        if (address(accessToken) != address(0) && accessToken.balanceOf(msg.sender) == 0) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                          CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    constructor(uint32 _rescueDelay, IERC20 _accessToken) {\\n        owner = msg.sender;\\n        rescueDelay = _rescueDelay;\\n        accessToken = _accessToken;\\n    }\\n    \\n    /**\\n     * @notice Set the XCM bridge address\\n     * @param _xcmBridge Address of the XCM bridge contract\\n     */\\n    function setXCMBridge(address _xcmBridge) external onlyOwner {\\n        if (_xcmBridge == address(0)) revert InvalidParameters();\\n        xcmBridge = DotFusionXCMBridge(payable(_xcmBridge));\\n    }\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        EXTERNAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Create a new swap with ERC20 tokens\\n     * @param swapId Unique identifier for this swap\\n     * @param secretHash Hash of the secret\\n     * @param maker Address of the maker\\n     * @param token Token to be swapped\\n     * @param amount Amount of tokens\\n     * @param timelock Duration before cancellation is allowed\\n     */\\n    function createSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable maker,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 timelock\\n    ) external payable {\\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\\n        if (amount == 0) revert InvalidAmount();\\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\\n        if (address(token) == address(0)) revert InvalidParameters();\\n        if (timelock > MAX_TIMELOCK) revert TimelockTooLong();\\n\\n        // Transfer tokens from taker to this contract\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 unlockTime = block.timestamp + timelock;\\n\\n        // Store swap\\n        swaps[swapId] = Swap({\\n            secretHash: secretHash,\\n            maker: maker,\\n            taker: payable(msg.sender),\\n            token: token,\\n            amount: amount,\\n            safetyDeposit: msg.value,\\n            unlockTime: unlockTime,\\n            state: SwapState.OPEN,\\n            swapId: swapId,\\n            isNative: false\\n        });\\n\\n        emit SwapCreated(swapId, secretHash, maker, msg.sender, address(token), amount, unlockTime);\\n    }\\n\\n    /**\\n     * @notice Create a new swap with native DOT\\n     * @param swapId Unique identifier for this swap\\n     * @param secretHash Hash of the secret\\n     * @param maker Address of the maker (Ethereum initiator)\\n     * @param timelock Duration before cancellation is allowed\\n     */\\n    function createNativeSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable maker,\\n        uint256 timelock\\n    ) external payable {\\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\\n        if (msg.value == 0) revert InvalidAmount();\\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\\n        if (timelock > MAX_TIMELOCK) revert TimelockTooLong();\\n\\n        uint256 unlockTime = block.timestamp + timelock;\\n\\n        // Store swap - msg.value is the DOT amount\\n        swaps[swapId] = Swap({\\n            secretHash: secretHash,\\n            maker: maker,\\n            taker: payable(msg.sender),\\n            token: IERC20(address(0)), // Native token\\n            amount: msg.value,\\n            safetyDeposit: 0,\\n            unlockTime: unlockTime,\\n            state: SwapState.OPEN,\\n            swapId: swapId,\\n            isNative: true\\n        });\\n\\n        emit SwapCreated(swapId, secretHash, maker, msg.sender, address(0), msg.value, unlockTime);\\n    }\\n\\n    /**\\n     * @notice Complete a swap by revealing the secret\\n     * @param swapId Unique swap identifier\\n     * @param secret Preimage of secretHash\\n     * @param target Address to receive the tokens\\n     * @dev Only the maker (original initiator on Ethereum) can claim to prevent front-running\\n     */\\n    function completeSwap(bytes32 swapId, bytes32 secret, address target) external nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (keccak256(abi.encodePacked(secret)) != swap.secretHash) revert InvalidSecret();\\n        if (msg.sender != swap.maker) revert Unauthorized();\\n\\n        // CEI Pattern: Update state before external calls\\n        swap.state = SwapState.COMPLETED;\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        uint256 deposit = swap.safetyDeposit;\\n\\n        // Transfer tokens or native DOT to target\\n        if (isNative) {\\n            // Native DOT transfer\\n            (bool success, ) = payable(target).call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            // ERC20 token transfer\\n            token.safeTransfer(target, amount);\\n\\n            // Return safety deposit to caller\\n            if (deposit > 0) {\\n                (bool success, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n        }\\n\\n        emit SwapCompleted(swapId, secret);\\n        \\n        // Automatically propagate secret to Ethereum via XCM bridge\\n        if (address(xcmBridge) != address(0)) {\\n            try xcmBridge.propagateSecret(swapId, secret) {\\n                // Secret propagation successful\\n            } catch {\\n                // XCM propagation failed, but swap is still completed\\n                // User can manually propagate the secret if needed\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancel a swap after timelock expires\\n     * @param swapId Unique swap identifier\\n     */\\n    function cancelSwap(bytes32 swapId) external nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\\n        if (msg.sender != swap.taker) revert Unauthorized();\\n\\n        // CEI Pattern: Update state before external calls\\n        swap.state = SwapState.CANCELLED;\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        uint256 deposit = swap.safetyDeposit;\\n        address payable taker = swap.taker;\\n\\n        // Return tokens or native DOT to taker\\n        if (isNative) {\\n            // Return native DOT\\n            (bool success, ) = taker.call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            // Return ERC20 tokens\\n            token.safeTransfer(taker, amount);\\n\\n            // Return safety deposit\\n            if (deposit > 0) {\\n                (bool success, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n        }\\n\\n        emit SwapCancelled(swapId);\\n    }\\n\\n    /**\\n     * @notice Public cancellation function (for access token holders)\\n     * @param swapId Unique swap identifier\\n     */\\n    function publicCancelSwap(bytes32 swapId) external onlyAccessTokenHolder() nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\\n\\n        // CEI Pattern: Update state before external calls\\n        swap.state = SwapState.CANCELLED;\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        uint256 deposit = swap.safetyDeposit;\\n        address payable taker = swap.taker;\\n\\n        // Return tokens or native DOT to taker\\n        if (isNative) {\\n            // Return native DOT\\n            (bool success, ) = taker.call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            // Return ERC20 tokens\\n            token.safeTransfer(taker, amount);\\n\\n            // Return safety deposit\\n            if (deposit > 0) {\\n                (bool success, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n        }\\n\\n        emit SwapCancelled(swapId);\\n    }\\n\\n    /**\\n     * @notice Rescue funds from a swap after rescue delay\\n     * @param swapId Unique swap identifier\\n     */\\n    function rescueFunds(bytes32 swapId) external onlyOwner nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state == SwapState.COMPLETED) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime + rescueDelay) revert TimelockNotExpired();\\n\\n        // CEI Pattern: Update state before external calls\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        swap.state = SwapState.CANCELLED;\\n        swap.amount = 0; // Prevent double-rescue\\n\\n        // Transfer tokens or native DOT to owner\\n        if (isNative) {\\n            (bool success, ) = owner.call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            token.safeTransfer(owner, amount);\\n        }\\n\\n        emit FundsRescued(swapId, address(token), amount);\\n    }\\n\\n    /**\\n     * @notice Get swap details\\n     * @param swapId Unique swap identifier\\n     * @return swap Full swap struct\\n     */\\n    function getSwap(bytes32 swapId) external view returns (Swap memory swap) {\\n        return swaps[swapId];\\n    }\\n\\n    /**\\n     * @notice Check if swap can be cancelled\\n     * @param swapId Unique swap identifier\\n     * @return canCancel True if timelock expired and swap is still open\\n     */\\n    function canCancel(bytes32 swapId) external view returns (bool) {\\n        Swap storage swap = swaps[swapId];\\n        return swap.state == SwapState.OPEN && block.timestamp >= swap.unlockTime;\\n    }\\n\\n    /**\\n     * @notice Check if secret is valid for a swap\\n     * @param swapId Unique swap identifier\\n     * @param secret Preimage to test\\n     * @return isValid True if secret matches secretHash\\n     */\\n    function isValidSecret(bytes32 swapId, bytes32 secret) external view returns (bool) {\\n        return keccak256(abi.encodePacked(secret)) == swaps[swapId].secretHash;\\n    }\\n    \\n    /**\\n     * @notice Manually propagate secret to Ethereum via XCM bridge\\n     * @param swapId Swap identifier\\n     * @param secret Revealed secret\\n     * @dev This can be called if automatic propagation failed\\n     */\\n    function propagateSecretToEthereum(bytes32 swapId, bytes32 secret) external {\\n        if (address(xcmBridge) == address(0)) revert XCMBridgeNotSet();\\n        \\n        // Verify the secret is correct for this swap\\n        if (keccak256(abi.encodePacked(secret)) != swaps[swapId].secretHash) revert InvalidSecret();\\n        \\n        // Only allow propagation for completed swaps\\n        if (swaps[swapId].state != SwapState.COMPLETED) revert SwapNotOpen();\\n        \\n        // Call XCM bridge to propagate secret\\n        xcmBridge.propagateSecret(swapId, secret);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        XCM BRIDGE COMPATIBILITY\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)\\n     * @param swapId Unique swap identifier (from Ethereum)\\n     * @param secretHash Hash of the secret\\n     * @dev Called by the XCM bridge contract for backward compatibility\\n     * @dev Other parameters are present for compatibility but not used\\n     */\\n    function receiveSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable /* receiver */,\\n        uint256 /* amount */,\\n        bytes32 /* ethereumSender */\\n    ) external payable {\\n        // This is a compatibility method for the XCM Bridge\\n        // In a real implementation, this would need to be adapted to work with\\n        // the new simplified pattern or the XCM Bridge would need to be updated\\n        // For now, we'll just accept the call but not store the swap data\\n        // as the new pattern uses individual parameters instead of Immutables\\n\\n        // Emit an event for tracking\\n        emit SwapCompleted(swapId, secretHash);\\n    }\\n\\n    /**\\n     * @dev Fallback function to accept native tokens\\n     */\\n    receive() external payable {}\\n}\\n\\n\",\"keccak256\":\"0xd7fdc92c3f98906af7f93ff88c80e5fa72fc94af54f2e17517e00dbf09620f1b\",\"license\":\"MIT\"},\"contracts/XCMBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {DotFusionPolkadotEscrow} from \\\"./PolkadotEscrow.sol\\\";\\n\\n/**\\n * @title DotFusion XCM Bridge\\n * @notice Bridge coordinator using XCM Precompile for cross-chain messaging\\n * @dev Integrates with Polkadot's XCM Precompile for cross-chain atomic swap coordination\\n * @custom:security-contact security@dotfusion.io\\n */\\ncontract DotFusionXCMBridge {\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                              TYPES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    struct XCMMessage {\\n        bytes32 swapId;\\n        bytes32 secret;\\n        address targetContract;\\n        uint256 timestamp;\\n        bool processed;\\n    }\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            STORAGE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    address public immutable owner;\\n    DotFusionPolkadotEscrow public escrow;\\n    \\n    // XCM Precompile address on Polkadot Asset Hub\\n    address public constant XCM_PRECOMPILE = 0x0000000000000000000000000000000000000804;\\n    \\n    // Ethereum parachain configuration\\n    uint32 public constant ETHEREUM_PARACHAIN_ID = 1000; // Example ParaId for Ethereum\\n    address public constant ETHEREUM_ESCROW_ADDRESS = 0x0000000000000000000000000000000000000000; // To be set\\n    \\n    // Message tracking\\n    mapping(bytes32 => XCMMessage) public messages;\\n    mapping(bytes32 => bool) public processedSecrets;\\n    \\n    // Fee configuration\\n    uint256 public constant MIN_XCM_FEE = 0.001 ether; // Minimum fee for XCM operations\\n    uint256 public xcmFee = 0.01 ether; // Configurable XCM fee\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    event MessageReceived(\\n        bytes32 indexed swapId,\\n        bytes32 indexed secretHash,\\n        address receiver,\\n        uint256 amount\\n    );\\n    \\n    event MessageSent(\\n        bytes32 indexed swapId,\\n        bytes32 secret,\\n        uint32 destination,\\n        uint256 fee\\n    );\\n    \\n    event SecretPropagated(\\n        bytes32 indexed swapId,\\n        bytes32 secret,\\n        address indexed ethereumEscrow\\n    );\\n    \\n    event BridgeConfigured(\\n        address indexed escrowAddress,\\n        address indexed ethereumEscrowAddress,\\n        uint32 ethereumParaId\\n    );\\n    \\n    event XCMFeeUpdated(\\n        uint256 oldFee,\\n        uint256 newFee\\n    );\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    error Unauthorized();\\n    error InvalidAddress();\\n    error EscrowNotSet();\\n    error InsufficientFee();\\n    error MessageAlreadyProcessed();\\n    error InvalidParaId();\\n    error XCMCallFailed();\\n    error SecretAlreadyPropagated();\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            MODIFIERS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n    \\n    modifier onlyEscrow() {\\n        if (msg.sender != address(escrow)) revert Unauthorized();\\n        _;\\n    }\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                          CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    constructor() {\\n        owner = msg.sender;\\n    }\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        EXTERNAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    /**\\n     * @notice Configure the bridge with escrow and Ethereum parachain details\\n     * @param _escrow Address of the Polkadot escrow contract\\n     * @param _ethereumEscrow Address of the Ethereum escrow contract\\n     * @param _ethereumParaId ParaId of the Ethereum parachain\\n     */\\n    function configureBridge(\\n        address _escrow,\\n        address _ethereumEscrow,\\n        uint32 _ethereumParaId\\n    ) external onlyOwner {\\n        if (_escrow == address(0)) revert InvalidAddress();\\n        if (_ethereumEscrow == address(0)) revert InvalidAddress();\\n        if (_ethereumParaId == 0) revert InvalidParaId();\\n        \\n        escrow = DotFusionPolkadotEscrow(payable(_escrow));\\n        \\n        emit BridgeConfigured(_escrow, _ethereumEscrow, _ethereumParaId);\\n    }\\n    \\n    /**\\n     * @notice Update XCM fee for cross-chain operations\\n     * @param _newFee New fee amount in wei\\n     */\\n    function updateXCMFee(uint256 _newFee) external onlyOwner {\\n        if (_newFee < MIN_XCM_FEE) revert InsufficientFee();\\n        \\n        uint256 oldFee = xcmFee;\\n        xcmFee = _newFee;\\n        \\n        emit XCMFeeUpdated(oldFee, _newFee);\\n    }\\n    \\n    /**\\n     * @notice Receive cross-chain message from Ethereum\\n     * @param swapId Unique swap identifier from Ethereum\\n     * @param secretHash Hash of the secret\\n     * @param receiver Receiver address on Polkadot\\n     * @param ethereumSender Original sender on Ethereum\\n     */\\n    function receiveFromEthereum(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable receiver,\\n        bytes32 ethereumSender\\n    ) external payable {\\n        if (address(escrow) == address(0)) revert EscrowNotSet();\\n        \\n        // Forward to escrow with value\\n        escrow.receiveSwap{value: msg.value}(\\n            swapId,\\n            secretHash,\\n            receiver,\\n            msg.value,\\n            ethereumSender\\n        );\\n        \\n        emit MessageReceived(swapId, secretHash, receiver, msg.value);\\n    }\\n    \\n    /**\\n     * @notice Send revealed secret back to Ethereum via XCM\\n     * @param swapId Swap identifier\\n     * @param secret Revealed secret\\n     * @dev This function uses the XCM Precompile to send cross-chain messages\\n     */\\n    function sendToEthereum(\\n        bytes32 swapId,\\n        bytes32 secret\\n    ) external payable {\\n        if (msg.value < xcmFee) revert InsufficientFee();\\n        if (processedSecrets[secret]) revert SecretAlreadyPropagated();\\n        \\n        // Mark secret as processed to prevent double-propagation\\n        processedSecrets[secret] = true;\\n        \\n        // Store message for tracking\\n        messages[swapId] = XCMMessage({\\n            swapId: swapId,\\n            secret: secret,\\n            targetContract: ETHEREUM_ESCROW_ADDRESS,\\n            timestamp: block.timestamp,\\n            processed: false\\n        });\\n        \\n        // Prepare XCM message for Ethereum parachain\\n        bytes memory xcmMessage = _buildXCMMessage(swapId, secret);\\n        \\n        // Call XCM Precompile to send message to Ethereum parachain\\n        (bool success, ) = XCM_PRECOMPILE.call{value: xcmFee}(\\n            abi.encodeWithSignature(\\n                \\\"send(uint32,bytes,uint64)\\\",\\n                ETHEREUM_PARACHAIN_ID,\\n                xcmMessage,\\n                uint64(1000000) // Weight limit\\n            )\\n        );\\n        \\n        if (!success) {\\n            // Revert the secret processing if XCM fails\\n            processedSecrets[secret] = false;\\n            delete messages[swapId];\\n            revert XCMCallFailed();\\n        }\\n        \\n        // Mark message as processed\\n        messages[swapId].processed = true;\\n        \\n        emit MessageSent(swapId, secret, ETHEREUM_PARACHAIN_ID, xcmFee);\\n        emit SecretPropagated(swapId, secret, ETHEREUM_ESCROW_ADDRESS);\\n        \\n        // Return excess fee to sender\\n        if (msg.value > xcmFee) {\\n            (bool refundSuccess, ) = payable(msg.sender).call{value: msg.value - xcmFee}(\\\"\\\");\\n            require(refundSuccess, \\\"Fee refund failed\\\");\\n        }\\n    }\\n    \\n    /**\\n     * @notice Alternative method to propagate secret (called by escrow)\\n     * @param swapId Swap identifier\\n     * @param secret Revealed secret\\n     */\\n    function propagateSecret(\\n        bytes32 swapId,\\n        bytes32 secret\\n    ) external onlyEscrow {\\n        if (processedSecrets[secret]) revert SecretAlreadyPropagated();\\n        \\n        // Mark secret as processed\\n        processedSecrets[secret] = true;\\n        \\n        // Store message for tracking\\n        messages[swapId] = XCMMessage({\\n            swapId: swapId,\\n            secret: secret,\\n            targetContract: ETHEREUM_ESCROW_ADDRESS,\\n            timestamp: block.timestamp,\\n            processed: false\\n        });\\n        \\n        // Prepare and send XCM message\\n        bytes memory xcmMessage = _buildXCMMessage(swapId, secret);\\n        \\n        (bool success, ) = XCM_PRECOMPILE.call{value: xcmFee}(\\n            abi.encodeWithSignature(\\n                \\\"send(uint32,bytes,uint64)\\\",\\n                ETHEREUM_PARACHAIN_ID,\\n                xcmMessage,\\n                uint64(1000000)\\n            )\\n        );\\n        \\n        if (!success) {\\n            processedSecrets[secret] = false;\\n            delete messages[swapId];\\n            revert XCMCallFailed();\\n        }\\n        \\n        messages[swapId].processed = true;\\n        \\n        emit MessageSent(swapId, secret, ETHEREUM_PARACHAIN_ID, xcmFee);\\n        emit SecretPropagated(swapId, secret, ETHEREUM_ESCROW_ADDRESS);\\n    }\\n    \\n    /**\\n     * @notice Get message details\\n     * @param swapId Swap identifier\\n     * @return message XCM message struct\\n     */\\n    function getMessage(bytes32 swapId) external view returns (XCMMessage memory message) {\\n        return messages[swapId];\\n    }\\n    \\n    /**\\n     * @notice Check if secret has been propagated\\n     * @param secret Secret to check\\n     * @return propagated True if secret has been propagated\\n     */\\n    function isSecretPropagated(bytes32 secret) external view returns (bool propagated) {\\n        return processedSecrets[secret];\\n    }\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        INTERNAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    /**\\n     * @notice Build XCM message payload for Ethereum parachain\\n     * @param swapId Swap identifier\\n     * @param secret Revealed secret\\n     * @return xcmMessage Encoded XCM message\\n     */\\n    function _buildXCMMessage(\\n        bytes32 swapId,\\n        bytes32 secret\\n    ) internal pure returns (bytes memory xcmMessage) {\\n        // XCM message format for calling Ethereum escrow contract\\n        // This would typically include:\\n        // 1. Transact instruction to call Ethereum escrow\\n        // 2. CompleteSwap function call with swapId and secret\\n        // 3. Weight limits and fee payment\\n        \\n        return abi.encode(\\n            // XCM Transact instruction\\n            uint8(0x02), // Transact instruction\\n            uint64(1000000), // Weight limit\\n            uint8(0x00), // Require weight at most\\n            // Encoded call to Ethereum escrow\\n            abi.encodeWithSignature(\\n                \\\"completeSwap(bytes32,bytes32)\\\",\\n                swapId,\\n                secret\\n            )\\n        );\\n    }\\n    \\n    /**\\n     * @notice Emergency function to withdraw accumulated fees\\n     */\\n    function withdrawFees() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = payable(owner).call{value: balance}(\\\"\\\");\\n            require(success, \\\"Withdrawal failed\\\");\\n        }\\n    }\\n    \\n    /**\\n     * @notice Receive ETH for XCM fees\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x529d92f7a0f014d58bc54b0e578a7085367e09943df61bc9cfb7b5de4d2fc434\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "custom:security-contact": "security@dotfusion.io",
    "details": "This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId. Funds are locked when users initiate swaps, and unlocked when secrets are revealed.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "canCancel(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        },
        "returns": {
          "_0": "canCancel True if timelock expired and swap is still open"
        }
      },
      "cancelSwap(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        }
      },
      "completeSwap(bytes32,bytes32,address)": {
        "details": "Only the maker (original initiator on Ethereum) can claim to prevent front-running",
        "params": {
          "secret": "Preimage of secretHash",
          "swapId": "Unique swap identifier",
          "target": "Address to receive the tokens"
        }
      },
      "createNativeSwap(bytes32,bytes32,address,uint256)": {
        "params": {
          "maker": "Address of the maker (Ethereum initiator)",
          "secretHash": "Hash of the secret",
          "swapId": "Unique identifier for this swap",
          "timelock": "Duration before cancellation is allowed"
        }
      },
      "createSwap(bytes32,bytes32,address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of tokens",
          "maker": "Address of the maker",
          "secretHash": "Hash of the secret",
          "swapId": "Unique identifier for this swap",
          "timelock": "Duration before cancellation is allowed",
          "token": "Token to be swapped"
        }
      },
      "getSwap(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        },
        "returns": {
          "swap": "Full swap struct"
        }
      },
      "isValidSecret(bytes32,bytes32)": {
        "params": {
          "secret": "Preimage to test",
          "swapId": "Unique swap identifier"
        },
        "returns": {
          "_0": "isValid True if secret matches secretHash"
        }
      },
      "propagateSecretToEthereum(bytes32,bytes32)": {
        "details": "This can be called if automatic propagation failed",
        "params": {
          "secret": "Revealed secret",
          "swapId": "Swap identifier"
        }
      },
      "publicCancelSwap(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        }
      },
      "receiveSwap(bytes32,bytes32,address,uint256,bytes32)": {
        "details": "Called by the XCM bridge contract for backward compatibilityOther parameters are present for compatibility but not used",
        "params": {
          "secretHash": "Hash of the secret",
          "swapId": "Unique swap identifier (from Ethereum)"
        }
      },
      "rescueFunds(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        }
      },
      "setXCMBridge(address)": {
        "params": {
          "_xcmBridge": "Address of the XCM bridge contract"
        }
      }
    },
    "title": "DotFusion Polkadot Escrow (Destination)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canCancel(bytes32)": {
        "notice": "Check if swap can be cancelled"
      },
      "cancelSwap(bytes32)": {
        "notice": "Cancel a swap after timelock expires"
      },
      "completeSwap(bytes32,bytes32,address)": {
        "notice": "Complete a swap by revealing the secret"
      },
      "createNativeSwap(bytes32,bytes32,address,uint256)": {
        "notice": "Create a new swap with native DOT"
      },
      "createSwap(bytes32,bytes32,address,address,uint256,uint256)": {
        "notice": "Create a new swap with ERC20 tokens"
      },
      "getSwap(bytes32)": {
        "notice": "Get swap details"
      },
      "isValidSecret(bytes32,bytes32)": {
        "notice": "Check if secret is valid for a swap"
      },
      "propagateSecretToEthereum(bytes32,bytes32)": {
        "notice": "Manually propagate secret to Ethereum via XCM bridge"
      },
      "publicCancelSwap(bytes32)": {
        "notice": "Public cancellation function (for access token holders)"
      },
      "receiveSwap(bytes32,bytes32,address,uint256,bytes32)": {
        "notice": "Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)"
      },
      "rescueFunds(bytes32)": {
        "notice": "Rescue funds from a swap after rescue delay"
      },
      "setXCMBridge(address)": {
        "notice": "Set the XCM bridge address"
      }
    },
    "notice": "Destination escrow contract for cross-chain atomic swaps on Polkadot",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 667,
        "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 775,
        "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
        "label": "swaps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Swap)770_storage)"
      },
      {
        "astId": 785,
        "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
        "label": "xcmBridge",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(DotFusionXCMBridge)2448"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(DotFusionXCMBridge)2448": {
        "encoding": "inplace",
        "label": "contract DotFusionXCMBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SwapState)747": {
        "encoding": "inplace",
        "label": "enum DotFusionPolkadotEscrow.SwapState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Swap)770_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DotFusionPolkadotEscrow.Swap)",
        "numberOfBytes": "32",
        "value": "t_struct(Swap)770_storage"
      },
      "t_struct(Swap)770_storage": {
        "encoding": "inplace",
        "label": "struct DotFusionPolkadotEscrow.Swap",
        "members": [
          {
            "astId": 749,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "secretHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 751,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "maker",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 753,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "taker",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 756,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 758,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 760,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "safetyDeposit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 762,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "unlockTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 765,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(SwapState)747"
          },
          {
            "astId": 767,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "swapId",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          },
          {
            "astId": 769,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "isNative",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}