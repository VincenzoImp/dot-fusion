{
  "address": "0x83124fbd0a1Cf1ae5774fc30e8B733de1FE72751",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_rescueDelay",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC20",
          "name": "_accessToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSecret",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSecretHash",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimelockNotExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsRescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "SwapCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "SwapCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "SwapCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accessToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "canCancel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "cancelSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "completeSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timelock",
          "type": "uint256"
        }
      ],
      "name": "createSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "getSwap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "secretHash",
              "type": "bytes32"
            },
            {
              "internalType": "address payable",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "enum DotFusionPolkadotEscrow.SwapState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "swapId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct DotFusionPolkadotEscrow.Swap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "isValidSecret",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "publicCancelSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "ethereumSender",
          "type": "bytes32"
        }
      ],
      "name": "receiveSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueDelay",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "swaps",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "taker",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "enum DotFusionPolkadotEscrow.SwapState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa033938324692b7db42ccea643ee5c0c4fd7d3a9707402db15f9c0a19d831fdf",
  "receipt": {
    "to": null,
    "from": "0x62206414DdE41446A0fa8eF6c6e93b9AAd9413ab",
    "contractAddress": "0x83124fbd0a1Cf1ae5774fc30e8B733de1FE72751",
    "transactionIndex": 2,
    "gasUsed": "5217344840",
    "logsBloom": "0x
    "blockHash": "0x11dc488ffaa164039e10b87b7963c96f719184f6b162bab1cf27b9bc7d4186de",
    "transactionHash": "0xa033938324692b7db42ccea643ee5c0c4fd7d3a9707402db15f9c0a19d831fdf",
    "logs": [],
    "blockNumber": 1812603,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    604800,
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "75f61bd8b93a9b4d8cde81de7793470c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rescueDelay\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_accessToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSecret\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSecretHash\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimelockNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"SwapCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"SwapCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"SwapCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"canCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"cancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"completeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelock\",\"type\":\"uint256\"}],\"name\":\"createSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"getSwap\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum DotFusionPolkadotEscrow.SwapState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"internalType\":\"struct DotFusionPolkadotEscrow.Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"isValidSecret\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"publicCancelSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"ethereumSender\",\"type\":\"bytes32\"}],\"name\":\"receiveSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"swaps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum DotFusionPolkadotEscrow.SwapState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"custom:security-contact\":\"security@dotfusion.io\",\"details\":\"This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId. Funds are locked when users initiate swaps, and unlocked when secrets are revealed.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"canCancel(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"},\"returns\":{\"_0\":\"canCancel True if timelock expired and swap is still open\"}},\"cancelSwap(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"}},\"completeSwap(bytes32,bytes32,address)\":{\"params\":{\"secret\":\"Preimage of secretHash\",\"swapId\":\"Unique swap identifier\",\"target\":\"Address to receive the tokens\"}},\"createSwap(bytes32,bytes32,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of tokens\",\"maker\":\"Address of the maker\",\"secretHash\":\"Hash of the secret\",\"swapId\":\"Unique identifier for this swap\",\"timelock\":\"Duration before cancellation is allowed\",\"token\":\"Token to be swapped\"}},\"getSwap(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"},\"returns\":{\"swap\":\"Full swap struct\"}},\"isValidSecret(bytes32,bytes32)\":{\"params\":{\"secret\":\"Preimage to test\",\"swapId\":\"Unique swap identifier\"},\"returns\":{\"_0\":\"isValid True if secret matches secretHash\"}},\"publicCancelSwap(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"}},\"receiveSwap(bytes32,bytes32,address,uint256,bytes32)\":{\"details\":\"Called by the XCM bridge contract for backward compatibility\",\"params\":{\"amount\":\"Amount to lock\",\"ethereumSender\":\"Original sender on Ethereum\",\"receiver\":\"Receiver address on Polkadot\",\"secretHash\":\"Hash of the secret\",\"swapId\":\"Unique swap identifier (from Ethereum)\"}},\"rescueFunds(bytes32)\":{\"params\":{\"swapId\":\"Unique swap identifier\"}}},\"title\":\"DotFusion Polkadot Escrow (Destination)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canCancel(bytes32)\":{\"notice\":\"Check if swap can be cancelled\"},\"cancelSwap(bytes32)\":{\"notice\":\"Cancel a swap after timelock expires\"},\"completeSwap(bytes32,bytes32,address)\":{\"notice\":\"Complete a swap by revealing the secret\"},\"createSwap(bytes32,bytes32,address,address,uint256,uint256)\":{\"notice\":\"Create a new swap\"},\"getSwap(bytes32)\":{\"notice\":\"Get swap details\"},\"isValidSecret(bytes32,bytes32)\":{\"notice\":\"Check if secret is valid for a swap\"},\"publicCancelSwap(bytes32)\":{\"notice\":\"Public cancellation function (for access token holders)\"},\"receiveSwap(bytes32,bytes32,address,uint256,bytes32)\":{\"notice\":\"Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)\"},\"rescueFunds(bytes32)\":{\"notice\":\"Rescue funds from a swap after rescue delay\"}},\"notice\":\"Destination escrow contract for cross-chain atomic swaps on Polkadot\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolkadotEscrow.sol\":\"DotFusionPolkadotEscrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/PolkadotEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title DotFusion Polkadot Escrow (Destination)\\n * @notice Destination escrow contract for cross-chain atomic swaps on Polkadot\\n * @dev This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId.\\n * Funds are locked when users initiate swaps, and unlocked when secrets are revealed.\\n * @custom:security-contact security@dotfusion.io\\n */\\ncontract DotFusionPolkadotEscrow {\\n    using SafeERC20 for IERC20;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                              TYPES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    enum SwapState {\\n        INVALID,\\n        OPEN,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n    \\n    struct Swap {\\n        bytes32 secretHash;           // Hash of the secret (preimage)\\n        address payable maker;        // User who initiated the swap\\n        address payable taker;        // User who will complete the swap\\n        IERC20 token;                 // Token being swapped\\n        uint256 amount;               // Amount of tokens\\n        uint256 safetyDeposit;        // ETH safety deposit\\n        uint256 unlockTime;           // When swap can be cancelled\\n        SwapState state;              // Current swap state\\n        bytes32 swapId;               // Unique swap identifier\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            STORAGE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    mapping(bytes32 => Swap) public swaps;\\n    \\n    // Owner and rescue delays\\n    address public immutable owner;\\n    uint32 public immutable rescueDelay;\\n    IERC20 public immutable accessToken;\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event SwapCreated(\\n        bytes32 indexed swapId,\\n        bytes32 indexed secretHash,\\n        address indexed maker,\\n        address taker,\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n    \\n    event SwapCompleted(\\n        bytes32 indexed swapId,\\n        bytes32 secret\\n    );\\n    \\n    event SwapCancelled(\\n        bytes32 indexed swapId\\n    );\\n    \\n    event FundsRescued(\\n        bytes32 indexed swapId,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    error SwapAlreadyExists();\\n    error SwapDoesNotExist();\\n    error InvalidSecretHash();\\n    error InvalidAmount();\\n    error InvalidSecret();\\n    error SwapNotOpen();\\n    error TimelockNotExpired();\\n    error Unauthorized();\\n    error TransferFailed();\\n    error InvalidParameters();\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            MODIFIERS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyAccessTokenHolder() {\\n        if (address(accessToken) != address(0) && accessToken.balanceOf(msg.sender) == 0) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                          CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    constructor(uint32 _rescueDelay, IERC20 _accessToken) {\\n        owner = msg.sender;\\n        rescueDelay = _rescueDelay;\\n        accessToken = _accessToken;\\n    }\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        EXTERNAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Create a new swap\\n     * @param swapId Unique identifier for this swap\\n     * @param secretHash Hash of the secret\\n     * @param maker Address of the maker\\n     * @param token Token to be swapped\\n     * @param amount Amount of tokens\\n     * @param timelock Duration before cancellation is allowed\\n     */\\n    function createSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable maker,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 timelock\\n    ) external payable {\\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\\n        if (amount == 0) revert InvalidAmount();\\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\\n        \\n        // Transfer tokens from taker to this contract\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        uint256 unlockTime = block.timestamp + timelock;\\n        \\n        // Store swap\\n        swaps[swapId] = Swap({\\n            secretHash: secretHash,\\n            maker: maker,\\n            taker: payable(msg.sender),\\n            token: token,\\n            amount: amount,\\n            safetyDeposit: msg.value,\\n            unlockTime: unlockTime,\\n            state: SwapState.OPEN,\\n            swapId: swapId\\n        });\\n        \\n        emit SwapCreated(swapId, secretHash, maker, msg.sender, address(token), amount, unlockTime);\\n    }\\n\\n    /**\\n     * @notice Complete a swap by revealing the secret\\n     * @param swapId Unique swap identifier\\n     * @param secret Preimage of secretHash\\n     * @param target Address to receive the tokens\\n     */\\n    function completeSwap(bytes32 swapId, bytes32 secret, address target) external {\\n        Swap storage swap = swaps[swapId];\\n        \\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (keccak256(abi.encodePacked(secret)) != swap.secretHash) revert InvalidSecret();\\n        \\n        swap.state = SwapState.COMPLETED;\\n        \\n        // Transfer tokens to target\\n        swap.token.safeTransfer(target, swap.amount);\\n        \\n        // Return safety deposit to caller\\n        if (swap.safetyDeposit > 0) {\\n            (bool success, ) = msg.sender.call{value: swap.safetyDeposit}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        }\\n        \\n        emit SwapCompleted(swapId, secret);\\n    }\\n\\n    /**\\n     * @notice Cancel a swap after timelock expires\\n     * @param swapId Unique swap identifier\\n     */\\n    function cancelSwap(bytes32 swapId) external {\\n        Swap storage swap = swaps[swapId];\\n        \\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\\n        if (msg.sender != swap.taker) revert Unauthorized();\\n        \\n        swap.state = SwapState.CANCELLED;\\n        \\n        // Return tokens to taker\\n        swap.token.safeTransfer(swap.taker, swap.amount);\\n        \\n        // Return safety deposit to caller\\n        if (swap.safetyDeposit > 0) {\\n            (bool success, ) = msg.sender.call{value: swap.safetyDeposit}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        }\\n        \\n        emit SwapCancelled(swapId);\\n    }\\n\\n    /**\\n     * @notice Public cancellation function (for access token holders)\\n     * @param swapId Unique swap identifier\\n     */\\n    function publicCancelSwap(bytes32 swapId) external onlyAccessTokenHolder() {\\n        Swap storage swap = swaps[swapId];\\n        \\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\\n        \\n        swap.state = SwapState.CANCELLED;\\n        \\n        // Return tokens to taker\\n        swap.token.safeTransfer(swap.taker, swap.amount);\\n        \\n        // Return safety deposit to caller\\n        if (swap.safetyDeposit > 0) {\\n            (bool success, ) = msg.sender.call{value: swap.safetyDeposit}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        }\\n        \\n        emit SwapCancelled(swapId);\\n    }\\n\\n    /**\\n     * @notice Rescue funds from a swap after rescue delay\\n     * @param swapId Unique swap identifier\\n     */\\n    function rescueFunds(bytes32 swapId) external onlyOwner {\\n        Swap storage swap = swaps[swapId];\\n        \\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (block.timestamp < swap.unlockTime + rescueDelay) revert TimelockNotExpired();\\n        \\n        // Transfer tokens to owner\\n        swap.token.safeTransfer(owner, swap.amount);\\n        \\n        emit FundsRescued(swapId, address(swap.token), swap.amount);\\n    }\\n\\n    /**\\n     * @notice Get swap details\\n     * @param swapId Unique swap identifier\\n     * @return swap Full swap struct\\n     */\\n    function getSwap(bytes32 swapId) external view returns (Swap memory swap) {\\n        return swaps[swapId];\\n    }\\n\\n    /**\\n     * @notice Check if swap can be cancelled\\n     * @param swapId Unique swap identifier\\n     * @return canCancel True if timelock expired and swap is still open\\n     */\\n    function canCancel(bytes32 swapId) external view returns (bool) {\\n        Swap storage swap = swaps[swapId];\\n        return swap.state == SwapState.OPEN && block.timestamp >= swap.unlockTime;\\n    }\\n\\n    /**\\n     * @notice Check if secret is valid for a swap\\n     * @param swapId Unique swap identifier\\n     * @param secret Preimage to test\\n     * @return isValid True if secret matches secretHash\\n     */\\n    function isValidSecret(bytes32 swapId, bytes32 secret) external view returns (bool) {\\n        return keccak256(abi.encodePacked(secret)) == swaps[swapId].secretHash;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        XCM BRIDGE COMPATIBILITY\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)\\n     * @param swapId Unique swap identifier (from Ethereum)\\n     * @param secretHash Hash of the secret\\n     * @param receiver Receiver address on Polkadot\\n     * @param amount Amount to lock\\n     * @param ethereumSender Original sender on Ethereum\\n     * @dev Called by the XCM bridge contract for backward compatibility\\n     */\\n    function receiveSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable receiver,\\n        uint256 amount,\\n        bytes32 ethereumSender\\n    ) external payable {\\n        // This is a compatibility method for the XCM Bridge\\n        // In a real implementation, this would need to be adapted to work with\\n        // the new simplified pattern or the XCM Bridge would need to be updated\\n        // For now, we'll just accept the call but not store the swap data\\n        // as the new pattern uses individual parameters instead of Immutables\\n        \\n        // Emit an event for tracking\\n        emit SwapCompleted(swapId, secretHash);\\n    }\\n\\n    /**\\n     * @dev Fallback function to accept native tokens\\n     */\\n    receive() external payable {}\\n}\\n\\n\",\"keccak256\":\"0x268f111263eb8039d3fe5ff31163a8c109ecaf002712b21148d1b32ec0e5cc3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161139638038061139683398101604081905261002f9161004f565b3360805263ffffffff90911660a0526001600160a01b031660c05261009e565b6000806040838503121561006257600080fd5b825163ffffffff8116811461007657600080fd5b60208401519092506001600160a01b038116811461009357600080fd5b809150509250929050565b60805160a05160c0516112a66100f06000396000818161025e015281816109e10152610a2701526000818161031e015261058e0152600081816101bf0152818161050901526105fe01526112a66000f3fe6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063d541beb311610059578063d541beb31461022c578063e243c5fb1461024c578063eb84e7f214610280578063f143d8a01461030c57600080fd5b80638da5cb5b146101ad5780638fc9fef1146101f9578063bffbf4dc1461020c57600080fd5b80631b4858a5146100d257806321922931146100f45780633da0e66e146101145780634287e3581461014a578063541cb23e1461017a5780636476fd3c1461018d57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed366004610fba565b610355565b005b34801561010057600080fd5b506100f261010f366004610ff3565b6104fe565b34801561012057600080fd5b5061013461012f366004610ff3565b610677565b6040516101419190611044565b60405180910390f35b34801561015657600080fd5b5061016a6101653660046110c0565b610773565b6040519015158152602001610141565b6100f26101883660046110e2565b6107ad565b34801561019957600080fd5b506100f26101a8366004610ff3565b6109df565b3480156101b957600080fd5b506101e17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610141565b6100f261020736600461113e565b610c3e565b34801561021857600080fd5b5061016a610227366004610ff3565b610c7f565b34801561023857600080fd5b506100f2610247366004610ff3565b610cc0565b34801561025857600080fd5b506101e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561028c57600080fd5b506102f761029b366004610ff3565b60006020819052908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460089098015496976001600160a01b0396871697958716969094169492939192909160ff169089565b60405161014199989796959493929190611187565b34801561031857600080fd5b506103407f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610141565b600083815260208190526040812090600782015460ff16600381111561037d5761037d61100c565b0361039b57604051631a40316d60e01b815260040160405180910390fd5b6001600782015460ff1660038111156103b6576103b661100c565b146103d457604051638d393d0b60e01b815260040160405180910390fd5b805460408051602081018690520160405160208183030381529060405280519060200120146104165760405163abab6bd760e01b815260040160405180910390fd5b60078101805460ff1916600217905560048101546003820154610446916001600160a01b03909116908490610d90565b6005810154156104be57600581015460405160009133918381818185875af1925050503d8060008114610495576040519150601f19603f3d011682016040523d82523d6000602084013e61049a565b606091505b50509050806104bc576040516312171d8360e31b815260040160405180910390fd5b505b837f7430d80e0e3cfb925010ff8993f6a56392199211e297fc7825278f29980ccf51846040516104f091815260200190565b60405180910390a250505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610546576040516282b42960e81b815260040160405180910390fd5b600081815260208190526040812090600782015460ff16600381111561056e5761056e61100c565b0361058c57604051631a40316d60e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681600601546105c291906111e5565b4210156105e25760405163621e25c360e01b815260040160405180910390fd5b60048101546003820154610623916001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000090610d90565b60038101546004820154604080516001600160a01b039093168352602083019190915283917fa35104aa8a532c97c48611c8cb3aba648a775480373089a088bb0170db273523910160405180910390a25050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152600082815260208181526040918290208251610120810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600380820154909216606084015260048101546080840152600581015460a0840152600681015460c08401526007810154909160e084019160ff169081111561074d5761074d61100c565b600381111561075e5761075e61100c565b81526020016008820154815250509050919050565b6000828152602081815260408083205481519283018590529101604051602081830303815290604052805190602001201490505b92915050565b846107cb5760405163d6502e2b60e01b815260040160405180910390fd5b816000036107ec5760405163162908e360e11b815260040160405180910390fd5b60008681526020819052604081206007015460ff1660038111156108125761081261100c565b14610830576040516339a2986760e11b815260040160405180910390fd5b6108456001600160a01b038416333085610df4565b600061085182426111e5565b9050604051806101200160405280878152602001866001600160a01b03168152602001336001600160a01b03168152602001856001600160a01b03168152602001848152602001348152602001828152602001600160038111156108b7576108b761100c565b8152602090810189905260008981528082526040908190208351815591830151600180840180546001600160a01b03199081166001600160a01b039485161790915592850151600285018054851691841691909117905560608501516003808601805490951691909316179092556080840151600484015560a0840151600584015560c0840151600684015560e08401516007840180549193909260ff1990921691849081111561096a5761096a61100c565b02179055506101009190910151600890910155604080513381526001600160a01b0386811660208301529181018590526060810183905290861690879089907f8fff31b7eeb2ae9daa1a973ccf5022c30c38c3ffcb54904f4a50ca205194bc019060800160405180910390a450505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610a9c57506040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9a9190611206565b155b15610ab9576040516282b42960e81b815260040160405180910390fd5b600081815260208190526040812090600782015460ff166003811115610ae157610ae161100c565b03610aff57604051631a40316d60e01b815260040160405180910390fd5b6001600782015460ff166003811115610b1a57610b1a61100c565b14610b3857604051638d393d0b60e01b815260040160405180910390fd5b8060060154421015610b5d5760405163621e25c360e01b815260040160405180910390fd5b60078101805460ff191660039081179091556002820154600483015491830154610b97926001600160a01b03918216929190911690610d90565b600581015415610c0f57600581015460405160009133918381818185875af1925050503d8060008114610be6576040519150601f19603f3d011682016040523d82523d6000602084013e610beb565b606091505b5050905080610c0d576040516312171d8360e31b815260040160405180910390fd5b505b60405182907f5a399591cfd74c375a1ffd61c20221db0db82381f65516889ed13c8cd1f99d5b90600090a25050565b847f7430d80e0e3cfb925010ff8993f6a56392199211e297fc7825278f29980ccf5185604051610c7091815260200190565b60405180910390a25050505050565b60008181526020819052604081206001600782015460ff166003811115610ca857610ca861100c565b148015610cb9575080600601544210155b9392505050565b600081815260208190526040812090600782015460ff166003811115610ce857610ce861100c565b03610d0657604051631a40316d60e01b815260040160405180910390fd5b6001600782015460ff166003811115610d2157610d2161100c565b14610d3f57604051638d393d0b60e01b815260040160405180910390fd5b8060060154421015610d645760405163621e25c360e01b815260040160405180910390fd5b60028101546001600160a01b03163314610b5d576040516282b42960e81b815260040160405180910390fd5b6040516001600160a01b03838116602483015260448201839052610def91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610e33565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610e2d9186918216906323b872dd90608401610dbd565b50505050565b6000610e486001600160a01b03841683610e9b565b90508051600014158015610e6d575080806020019051810190610e6b919061121f565b155b15610def57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6060610cb98383600084600080856001600160a01b03168486604051610ec19190611241565b60006040518083038185875af1925050503d8060008114610efe576040519150601f19603f3d011682016040523d82523d6000602084013e610f03565b606091505b5091509150610f13868383610f1d565b9695505050505050565b606082610f3257610f2d82610f79565b610cb9565b8151158015610f4957506001600160a01b0384163b155b15610f7257604051639996b31560e01b81526001600160a01b0385166004820152602401610e92565b5080610cb9565b805115610f895780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b0381168114610fa257600080fd5b600080600060608486031215610fcf57600080fd5b83359250602084013591506040840135610fe881610fa5565b809150509250925092565b60006020828403121561100557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061104057634e487b7160e01b600052602160045260246000fd5b9052565b815181526020808301516001600160a01b039081169183019190915260408084015182169083015260608084015191821690830152610120820190506080830151608083015260a083015160a083015260c083015160c083015260e08301516110b060e0840182611022565b5061010092830151919092015290565b600080604083850312156110d357600080fd5b50508035926020909101359150565b60008060008060008060c087890312156110fb57600080fd5b8635955060208701359450604087013561111481610fa5565b9350606087013561112481610fa5565b9598949750929560808101359460a0909101359350915050565b600080600080600060a0868803121561115657600080fd5b8535945060208601359350604086013561116f81610fa5565b94979396509394606081013594506080013592915050565b8981526001600160a01b0389811660208301528881166040830152871660608201526080810186905260a0810185905260c0810184905261012081016111d060e0830185611022565b826101008301529a9950505050505050505050565b808201808211156107a757634e487b7160e01b600052601160045260246000fd5b60006020828403121561121857600080fd5b5051919050565b60006020828403121561123157600080fd5b81518015158114610cb957600080fd5b6000825160005b818110156112625760208186018101518583015201611248565b50600092019182525091905056fea2646970667358221220a88efd67bcdc390fac7876dda1599beb10147199a0ca9bc1bc319c69e8573cb564736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063d541beb311610059578063d541beb31461022c578063e243c5fb1461024c578063eb84e7f214610280578063f143d8a01461030c57600080fd5b80638da5cb5b146101ad5780638fc9fef1146101f9578063bffbf4dc1461020c57600080fd5b80631b4858a5146100d257806321922931146100f45780633da0e66e146101145780634287e3581461014a578063541cb23e1461017a5780636476fd3c1461018d57600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506100f26100ed366004610fba565b610355565b005b34801561010057600080fd5b506100f261010f366004610ff3565b6104fe565b34801561012057600080fd5b5061013461012f366004610ff3565b610677565b6040516101419190611044565b60405180910390f35b34801561015657600080fd5b5061016a6101653660046110c0565b610773565b6040519015158152602001610141565b6100f26101883660046110e2565b6107ad565b34801561019957600080fd5b506100f26101a8366004610ff3565b6109df565b3480156101b957600080fd5b506101e17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610141565b6100f261020736600461113e565b610c3e565b34801561021857600080fd5b5061016a610227366004610ff3565b610c7f565b34801561023857600080fd5b506100f2610247366004610ff3565b610cc0565b34801561025857600080fd5b506101e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561028c57600080fd5b506102f761029b366004610ff3565b60006020819052908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460089098015496976001600160a01b0396871697958716969094169492939192909160ff169089565b60405161014199989796959493929190611187565b34801561031857600080fd5b506103407f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610141565b600083815260208190526040812090600782015460ff16600381111561037d5761037d61100c565b0361039b57604051631a40316d60e01b815260040160405180910390fd5b6001600782015460ff1660038111156103b6576103b661100c565b146103d457604051638d393d0b60e01b815260040160405180910390fd5b805460408051602081018690520160405160208183030381529060405280519060200120146104165760405163abab6bd760e01b815260040160405180910390fd5b60078101805460ff1916600217905560048101546003820154610446916001600160a01b03909116908490610d90565b6005810154156104be57600581015460405160009133918381818185875af1925050503d8060008114610495576040519150601f19603f3d011682016040523d82523d6000602084013e61049a565b606091505b50509050806104bc576040516312171d8360e31b815260040160405180910390fd5b505b837f7430d80e0e3cfb925010ff8993f6a56392199211e297fc7825278f29980ccf51846040516104f091815260200190565b60405180910390a250505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610546576040516282b42960e81b815260040160405180910390fd5b600081815260208190526040812090600782015460ff16600381111561056e5761056e61100c565b0361058c57604051631a40316d60e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681600601546105c291906111e5565b4210156105e25760405163621e25c360e01b815260040160405180910390fd5b60048101546003820154610623916001600160a01b03909116907f000000000000000000000000000000000000000000000000000000000000000090610d90565b60038101546004820154604080516001600160a01b039093168352602083019190915283917fa35104aa8a532c97c48611c8cb3aba648a775480373089a088bb0170db273523910160405180910390a25050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152600082815260208181526040918290208251610120810184528154815260018201546001600160a01b03908116938201939093526002820154831693810193909352600380820154909216606084015260048101546080840152600581015460a0840152600681015460c08401526007810154909160e084019160ff169081111561074d5761074d61100c565b600381111561075e5761075e61100c565b81526020016008820154815250509050919050565b6000828152602081815260408083205481519283018590529101604051602081830303815290604052805190602001201490505b92915050565b846107cb5760405163d6502e2b60e01b815260040160405180910390fd5b816000036107ec5760405163162908e360e11b815260040160405180910390fd5b60008681526020819052604081206007015460ff1660038111156108125761081261100c565b14610830576040516339a2986760e11b815260040160405180910390fd5b6108456001600160a01b038416333085610df4565b600061085182426111e5565b9050604051806101200160405280878152602001866001600160a01b03168152602001336001600160a01b03168152602001856001600160a01b03168152602001848152602001348152602001828152602001600160038111156108b7576108b761100c565b8152602090810189905260008981528082526040908190208351815591830151600180840180546001600160a01b03199081166001600160a01b039485161790915592850151600285018054851691841691909117905560608501516003808601805490951691909316179092556080840151600484015560a0840151600584015560c0840151600684015560e08401516007840180549193909260ff1990921691849081111561096a5761096a61100c565b02179055506101009190910151600890910155604080513381526001600160a01b0386811660208301529181018590526060810183905290861690879089907f8fff31b7eeb2ae9daa1a973ccf5022c30c38c3ffcb54904f4a50ca205194bc019060800160405180910390a450505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610a9c57506040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9a9190611206565b155b15610ab9576040516282b42960e81b815260040160405180910390fd5b600081815260208190526040812090600782015460ff166003811115610ae157610ae161100c565b03610aff57604051631a40316d60e01b815260040160405180910390fd5b6001600782015460ff166003811115610b1a57610b1a61100c565b14610b3857604051638d393d0b60e01b815260040160405180910390fd5b8060060154421015610b5d5760405163621e25c360e01b815260040160405180910390fd5b60078101805460ff191660039081179091556002820154600483015491830154610b97926001600160a01b03918216929190911690610d90565b600581015415610c0f57600581015460405160009133918381818185875af1925050503d8060008114610be6576040519150601f19603f3d011682016040523d82523d6000602084013e610beb565b606091505b5050905080610c0d576040516312171d8360e31b815260040160405180910390fd5b505b60405182907f5a399591cfd74c375a1ffd61c20221db0db82381f65516889ed13c8cd1f99d5b90600090a25050565b847f7430d80e0e3cfb925010ff8993f6a56392199211e297fc7825278f29980ccf5185604051610c7091815260200190565b60405180910390a25050505050565b60008181526020819052604081206001600782015460ff166003811115610ca857610ca861100c565b148015610cb9575080600601544210155b9392505050565b600081815260208190526040812090600782015460ff166003811115610ce857610ce861100c565b03610d0657604051631a40316d60e01b815260040160405180910390fd5b6001600782015460ff166003811115610d2157610d2161100c565b14610d3f57604051638d393d0b60e01b815260040160405180910390fd5b8060060154421015610d645760405163621e25c360e01b815260040160405180910390fd5b60028101546001600160a01b03163314610b5d576040516282b42960e81b815260040160405180910390fd5b6040516001600160a01b03838116602483015260448201839052610def91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610e33565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052610e2d9186918216906323b872dd90608401610dbd565b50505050565b6000610e486001600160a01b03841683610e9b565b90508051600014158015610e6d575080806020019051810190610e6b919061121f565b155b15610def57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b6060610cb98383600084600080856001600160a01b03168486604051610ec19190611241565b60006040518083038185875af1925050503d8060008114610efe576040519150601f19603f3d011682016040523d82523d6000602084013e610f03565b606091505b5091509150610f13868383610f1d565b9695505050505050565b606082610f3257610f2d82610f79565b610cb9565b8151158015610f4957506001600160a01b0384163b155b15610f7257604051639996b31560e01b81526001600160a01b0385166004820152602401610e92565b5080610cb9565b805115610f895780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b0381168114610fa257600080fd5b600080600060608486031215610fcf57600080fd5b83359250602084013591506040840135610fe881610fa5565b809150509250925092565b60006020828403121561100557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6004811061104057634e487b7160e01b600052602160045260246000fd5b9052565b815181526020808301516001600160a01b039081169183019190915260408084015182169083015260608084015191821690830152610120820190506080830151608083015260a083015160a083015260c083015160c083015260e08301516110b060e0840182611022565b5061010092830151919092015290565b600080604083850312156110d357600080fd5b50508035926020909101359150565b60008060008060008060c087890312156110fb57600080fd5b8635955060208701359450604087013561111481610fa5565b9350606087013561112481610fa5565b9598949750929560808101359460a0909101359350915050565b600080600080600060a0868803121561115657600080fd5b8535945060208601359350604086013561116f81610fa5565b94979396509394606081013594506080013592915050565b8981526001600160a01b0389811660208301528881166040830152871660608201526080810186905260a0810185905260c0810184905261012081016111d060e0830185611022565b826101008301529a9950505050505050505050565b808201808211156107a757634e487b7160e01b600052601160045260246000fd5b60006020828403121561121857600080fd5b5051919050565b60006020828403121561123157600080fd5b81518015158114610cb957600080fd5b6000825160005b818110156112625760208186018101518583015201611248565b50600092019182525091905056fea2646970667358221220a88efd67bcdc390fac7876dda1599beb10147199a0ca9bc1bc319c69e8573cb564736f6c63430008170033",
  "devdoc": {
    "custom:security-contact": "security@dotfusion.io",
    "details": "This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId. Funds are locked when users initiate swaps, and unlocked when secrets are revealed.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "canCancel(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        },
        "returns": {
          "_0": "canCancel True if timelock expired and swap is still open"
        }
      },
      "cancelSwap(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        }
      },
      "completeSwap(bytes32,bytes32,address)": {
        "params": {
          "secret": "Preimage of secretHash",
          "swapId": "Unique swap identifier",
          "target": "Address to receive the tokens"
        }
      },
      "createSwap(bytes32,bytes32,address,address,uint256,uint256)": {
        "params": {
          "amount": "Amount of tokens",
          "maker": "Address of the maker",
          "secretHash": "Hash of the secret",
          "swapId": "Unique identifier for this swap",
          "timelock": "Duration before cancellation is allowed",
          "token": "Token to be swapped"
        }
      },
      "getSwap(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        },
        "returns": {
          "swap": "Full swap struct"
        }
      },
      "isValidSecret(bytes32,bytes32)": {
        "params": {
          "secret": "Preimage to test",
          "swapId": "Unique swap identifier"
        },
        "returns": {
          "_0": "isValid True if secret matches secretHash"
        }
      },
      "publicCancelSwap(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        }
      },
      "receiveSwap(bytes32,bytes32,address,uint256,bytes32)": {
        "details": "Called by the XCM bridge contract for backward compatibility",
        "params": {
          "amount": "Amount to lock",
          "ethereumSender": "Original sender on Ethereum",
          "receiver": "Receiver address on Polkadot",
          "secretHash": "Hash of the secret",
          "swapId": "Unique swap identifier (from Ethereum)"
        }
      },
      "rescueFunds(bytes32)": {
        "params": {
          "swapId": "Unique swap identifier"
        }
      }
    },
    "title": "DotFusion Polkadot Escrow (Destination)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canCancel(bytes32)": {
        "notice": "Check if swap can be cancelled"
      },
      "cancelSwap(bytes32)": {
        "notice": "Cancel a swap after timelock expires"
      },
      "completeSwap(bytes32,bytes32,address)": {
        "notice": "Complete a swap by revealing the secret"
      },
      "createSwap(bytes32,bytes32,address,address,uint256,uint256)": {
        "notice": "Create a new swap"
      },
      "getSwap(bytes32)": {
        "notice": "Get swap details"
      },
      "isValidSecret(bytes32,bytes32)": {
        "notice": "Check if secret is valid for a swap"
      },
      "publicCancelSwap(bytes32)": {
        "notice": "Public cancellation function (for access token holders)"
      },
      "receiveSwap(bytes32,bytes32,address,uint256,bytes32)": {
        "notice": "Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)"
      },
      "rescueFunds(bytes32)": {
        "notice": "Rescue funds from a swap after rescue delay"
      }
    },
    "notice": "Destination escrow contract for cross-chain atomic swaps on Polkadot",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1367,
        "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
        "label": "swaps",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Swap)1362_storage)"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SwapState)1341": {
        "encoding": "inplace",
        "label": "enum DotFusionPolkadotEscrow.SwapState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(Swap)1362_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DotFusionPolkadotEscrow.Swap)",
        "numberOfBytes": "32",
        "value": "t_struct(Swap)1362_storage"
      },
      "t_struct(Swap)1362_storage": {
        "encoding": "inplace",
        "label": "struct DotFusionPolkadotEscrow.Swap",
        "members": [
          {
            "astId": 1343,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "secretHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1345,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "maker",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 1347,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "taker",
            "offset": 0,
            "slot": "2",
            "type": "t_address_payable"
          },
          {
            "astId": 1350,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 1352,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1354,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "safetyDeposit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1356,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "unlockTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1359,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(SwapState)1341"
          },
          {
            "astId": 1361,
            "contract": "contracts/PolkadotEscrow.sol:DotFusionPolkadotEscrow",
            "label": "swapId",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}