{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/EthereumEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title DotFusion Ethereum Escrow (Source)\n * @notice Source escrow contract for cross-chain atomic swaps on Ethereum\n * @dev This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId.\n * Funds are locked when users initiate swaps, and unlocked when secrets are revealed.\n * @custom:security-contact security@dotfusion.io\n */\ncontract DotFusionEthereumEscrow is ReentrancyGuard {\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                              TYPES\n    // ═══════════════════════════════════════════════════════════════════\n    \n    enum SwapState {\n        INVALID,\n        OPEN,\n        COMPLETED,\n        CANCELLED\n    }\n    \n    struct Swap {\n        bytes32 secretHash;           // Hash of the secret (preimage)\n        address payable maker;        // User who initiated the swap (ETH provider)\n        address payable taker;        // User who will complete the swap (DOT provider)\n        uint256 ethAmount;            // Amount of ETH being swapped\n        uint256 dotAmount;            // Amount of DOT expected in return\n        uint256 exchangeRate;         // Fixed exchange rate (DOT per ETH * 1e18)\n        uint256 unlockTime;           // When swap can be cancelled\n        SwapState state;              // Current swap state\n        bytes32 swapId;               // Unique swap identifier\n        bytes32 polkadotSender;       // Polkadot address of the taker\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                            STORAGE\n    // ═══════════════════════════════════════════════════════════════════\n\n    mapping(bytes32 => Swap) public swaps;\n\n    // Owner and rescue delays\n    address public immutable owner;\n    uint32 public immutable rescueDelay;\n    address public immutable accessToken;\n\n    // Minimum timelock to ensure T_eth > T_dot (recommended: 12 hours)\n    uint256 public constant MIN_TIMELOCK = 12 hours;\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                            EVENTS\n    // ═══════════════════════════════════════════════════════════════════\n\n    event SwapCreated(\n        bytes32 indexed swapId,\n        bytes32 indexed secretHash,\n        address indexed maker,\n        address taker,\n        uint256 ethAmount,\n        uint256 dotAmount,\n        uint256 exchangeRate,\n        uint256 unlockTime,\n        bytes32 polkadotSender\n    );\n    \n    event SwapCompleted(\n        bytes32 indexed swapId,\n        bytes32 secret\n    );\n    \n    event SwapCancelled(\n        bytes32 indexed swapId\n    );\n    \n    event FundsRescued(\n        bytes32 indexed swapId,\n        uint256 ethAmount\n    );\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                            ERRORS\n    // ═══════════════════════════════════════════════════════════════════\n\n    error SwapAlreadyExists();\n    error SwapDoesNotExist();\n    error InvalidSecretHash();\n    error InvalidAmount();\n    error InvalidSecret();\n    error SwapNotOpen();\n    error TimelockNotExpired();\n    error Unauthorized();\n    error TransferFailed();\n    error InvalidParameters();\n    error TimelockTooShort();\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                            MODIFIERS\n    // ═══════════════════════════════════════════════════════════════════\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert Unauthorized();\n        _;\n    }\n\n    modifier onlyAccessTokenHolder() {\n        if (accessToken != address(0)) {\n            // For now, we'll skip the access token check since we're not using ERC20\n            // This can be implemented later if needed\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                          CONSTRUCTOR\n    // ═══════════════════════════════════════════════════════════════════\n\n    constructor(uint32 _rescueDelay, address _accessToken) {\n        owner = msg.sender;\n        rescueDelay = _rescueDelay;\n        accessToken = _accessToken;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                        EXTERNAL FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Create a new ETH-DOT cross-chain swap\n     * @param swapId Unique identifier for this swap\n     * @param secretHash Hash of the secret\n     * @param taker Ethereum address of the taker (DOT provider)\n     * @param ethAmount Amount of ETH being swapped\n     * @param dotAmount Amount of DOT expected in return\n     * @param exchangeRate Fixed exchange rate (DOT per ETH * 1e18)\n     * @param timelock Duration before cancellation is allowed\n     * @param polkadotSender Polkadot address of the taker\n     */\n    function createSwap(\n        bytes32 swapId,\n        bytes32 secretHash,\n        address payable taker,\n        uint256 ethAmount,\n        uint256 dotAmount,\n        uint256 exchangeRate,\n        uint256 timelock,\n        bytes32 polkadotSender\n    ) external payable {\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\n        if (ethAmount == 0 || dotAmount == 0) revert InvalidAmount();\n        if (exchangeRate == 0) revert InvalidParameters();\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\n        if (msg.value != ethAmount) revert InvalidAmount();\n        if (timelock < MIN_TIMELOCK) revert TimelockTooShort();\n        \n        uint256 unlockTime = block.timestamp + timelock;\n        \n        // Store swap\n        swaps[swapId] = Swap({\n            secretHash: secretHash,\n            maker: payable(msg.sender),\n            taker: taker,\n            ethAmount: ethAmount,\n            dotAmount: dotAmount,\n            exchangeRate: exchangeRate,\n            unlockTime: unlockTime,\n            state: SwapState.OPEN,\n            swapId: swapId,\n            polkadotSender: polkadotSender\n        });\n        \n        emit SwapCreated(swapId, secretHash, msg.sender, taker, ethAmount, dotAmount, exchangeRate, unlockTime, polkadotSender);\n    }\n\n    /**\n     * @notice Complete a swap by revealing the secret (called by taker after providing DOT)\n     * @param swapId Unique swap identifier\n     * @param secret Preimage of secretHash\n     */\n    function completeSwap(bytes32 swapId, bytes32 secret) external nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\n        if (keccak256(abi.encodePacked(secret)) != swap.secretHash) revert InvalidSecret();\n        if (msg.sender != swap.taker) revert Unauthorized();\n\n        // CEI Pattern: Update state before external call\n        swap.state = SwapState.COMPLETED;\n        uint256 amount = swap.ethAmount;\n        address payable recipient = swap.taker;\n\n        // Transfer ETH to taker (who provided DOT on Polkadot)\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n\n        emit SwapCompleted(swapId, secret);\n    }\n\n    /**\n     * @notice Cancel a swap after timelock expires\n     * @param swapId Unique swap identifier\n     */\n    function cancelSwap(bytes32 swapId) external nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\n        if (msg.sender != swap.maker) revert Unauthorized();\n\n        // CEI Pattern: Update state before external call\n        swap.state = SwapState.CANCELLED;\n        uint256 amount = swap.ethAmount;\n        address payable recipient = swap.maker;\n\n        // Return ETH to maker\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n\n        emit SwapCancelled(swapId);\n    }\n\n    /**\n     * @notice Public cancellation function (for access token holders)\n     * @param swapId Unique swap identifier\n     */\n    function publicCancelSwap(bytes32 swapId) external onlyAccessTokenHolder() nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\n\n        // CEI Pattern: Update state before external call\n        swap.state = SwapState.CANCELLED;\n        uint256 amount = swap.ethAmount;\n        address payable recipient = swap.maker;\n\n        // Return ETH to maker\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n\n        emit SwapCancelled(swapId);\n    }\n\n    /**\n     * @notice Rescue funds from a swap after rescue delay\n     * @param swapId Unique swap identifier\n     */\n    function rescueFunds(bytes32 swapId) external onlyOwner nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state == SwapState.COMPLETED) revert SwapNotOpen();\n        if (block.timestamp < swap.unlockTime + rescueDelay) revert TimelockNotExpired();\n\n        // CEI Pattern: Update state before external call\n        uint256 amount = swap.ethAmount;\n        swap.state = SwapState.CANCELLED;\n        swap.ethAmount = 0; // Prevent double-rescue\n\n        // Transfer ETH to owner\n        (bool success, ) = owner.call{value: amount}(\"\");\n        if (!success) revert TransferFailed();\n\n        emit FundsRescued(swapId, amount);\n    }\n\n    /**\n     * @notice Get swap details\n     * @param swapId Unique swap identifier\n     * @return swap Full swap struct\n     */\n    function getSwap(bytes32 swapId) external view returns (Swap memory swap) {\n        return swaps[swapId];\n    }\n\n    /**\n     * @notice Check if swap can be cancelled\n     * @param swapId Unique swap identifier\n     * @return canCancel True if timelock expired and swap is still open\n     */\n    function canCancel(bytes32 swapId) external view returns (bool) {\n        Swap storage swap = swaps[swapId];\n        return swap.state == SwapState.OPEN && block.timestamp >= swap.unlockTime;\n    }\n\n    /**\n     * @notice Check if secret is valid for a swap\n     * @param swapId Unique swap identifier\n     * @param secret Preimage to test\n     * @return isValid True if secret matches secretHash\n     */\n    function isValidSecret(bytes32 swapId, bytes32 secret) external view returns (bool) {\n        return keccak256(abi.encodePacked(secret)) == swaps[swapId].secretHash;\n    }\n\n    /**\n     * @dev Fallback function to accept ETH\n     */\n    receive() external payable {}\n}\n"
    },
    "contracts/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MockERC20\n * @notice Mock ERC20 token for testing purposes\n */\ncontract MockERC20 is ERC20 {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n    /**\n     * @notice Mint tokens to an address\n     * @param to Address to mint to\n     * @param amount Amount to mint\n     */\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n\n    /**\n     * @notice Burn tokens from an address\n     * @param from Address to burn from\n     * @param amount Amount to burn\n     */\n    function burn(address from, uint256 amount) external {\n        _burn(from, amount);\n    }\n}\n"
    },
    "contracts/PolkadotEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title DotFusion Polkadot Escrow (Destination)\n * @notice Destination escrow contract for cross-chain atomic swaps on Polkadot\n * @dev This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId.\n * Funds are locked when users initiate swaps, and unlocked when secrets are revealed.\n * @custom:security-contact security@dotfusion.io\n */\ncontract DotFusionPolkadotEscrow is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                              TYPES\n    // ═══════════════════════════════════════════════════════════════════\n    \n    enum SwapState {\n        INVALID,\n        OPEN,\n        COMPLETED,\n        CANCELLED\n    }\n    \n    struct Swap {\n        bytes32 secretHash;           // Hash of the secret (preimage)\n        address payable maker;        // User who initiated the swap\n        address payable taker;        // User who will complete the swap\n        IERC20 token;                 // Token being swapped (address(0) for native DOT)\n        uint256 amount;               // Amount of tokens or native DOT\n        uint256 safetyDeposit;        // ETH safety deposit (unused for native DOT swaps)\n        uint256 unlockTime;           // When swap can be cancelled\n        SwapState state;              // Current swap state\n        bytes32 swapId;               // Unique swap identifier\n        bool isNative;                // True if this is a native DOT swap\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                            STORAGE\n    // ═══════════════════════════════════════════════════════════════════\n\n    mapping(bytes32 => Swap) public swaps;\n\n    // Owner and rescue delays\n    address public immutable owner;\n    uint32 public immutable rescueDelay;\n    IERC20 public immutable accessToken;\n\n    // Maximum timelock to ensure T_dot < T_eth (recommended: 6 hours)\n    // This ensures the Polkadot side expires before Ethereum side\n    uint256 public constant MAX_TIMELOCK = 6 hours;\n    \n    // ═══════════════════════════════════════════════════════════════════\n    //                            EVENTS\n    // ═══════════════════════════════════════════════════════════════════\n\n    event SwapCreated(\n        bytes32 indexed swapId,\n        bytes32 indexed secretHash,\n        address indexed maker,\n        address taker,\n        address token,\n        uint256 amount,\n        uint256 unlockTime\n    );\n    \n    event SwapCompleted(\n        bytes32 indexed swapId,\n        bytes32 secret\n    );\n    \n    event SwapCancelled(\n        bytes32 indexed swapId\n    );\n    \n    event FundsRescued(\n        bytes32 indexed swapId,\n        address token,\n        uint256 amount\n    );\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                            ERRORS\n    // ═══════════════════════════════════════════════════════════════════\n\n    error SwapAlreadyExists();\n    error SwapDoesNotExist();\n    error InvalidSecretHash();\n    error InvalidAmount();\n    error InvalidSecret();\n    error SwapNotOpen();\n    error TimelockNotExpired();\n    error Unauthorized();\n    error TransferFailed();\n    error InvalidParameters();\n    error TimelockTooLong();\n    \n    // ═══════════════════════════════════════════════════════════════════\n    //                            MODIFIERS\n    // ═══════════════════════════════════════════════════════════════════\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert Unauthorized();\n        _;\n    }\n\n    modifier onlyAccessTokenHolder() {\n        if (address(accessToken) != address(0) && accessToken.balanceOf(msg.sender) == 0) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                          CONSTRUCTOR\n    // ═══════════════════════════════════════════════════════════════════\n\n    constructor(uint32 _rescueDelay, IERC20 _accessToken) {\n        owner = msg.sender;\n        rescueDelay = _rescueDelay;\n        accessToken = _accessToken;\n    }\n    \n    // ═══════════════════════════════════════════════════════════════════\n    //                        EXTERNAL FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Create a new swap with ERC20 tokens\n     * @param swapId Unique identifier for this swap\n     * @param secretHash Hash of the secret\n     * @param maker Address of the maker\n     * @param token Token to be swapped\n     * @param amount Amount of tokens\n     * @param timelock Duration before cancellation is allowed\n     */\n    function createSwap(\n        bytes32 swapId,\n        bytes32 secretHash,\n        address payable maker,\n        IERC20 token,\n        uint256 amount,\n        uint256 timelock\n    ) external payable {\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\n        if (amount == 0) revert InvalidAmount();\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\n        if (address(token) == address(0)) revert InvalidParameters();\n        if (timelock > MAX_TIMELOCK) revert TimelockTooLong();\n\n        // Transfer tokens from taker to this contract\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        uint256 unlockTime = block.timestamp + timelock;\n\n        // Store swap\n        swaps[swapId] = Swap({\n            secretHash: secretHash,\n            maker: maker,\n            taker: payable(msg.sender),\n            token: token,\n            amount: amount,\n            safetyDeposit: msg.value,\n            unlockTime: unlockTime,\n            state: SwapState.OPEN,\n            swapId: swapId,\n            isNative: false\n        });\n\n        emit SwapCreated(swapId, secretHash, maker, msg.sender, address(token), amount, unlockTime);\n    }\n\n    /**\n     * @notice Create a new swap with native DOT\n     * @param swapId Unique identifier for this swap\n     * @param secretHash Hash of the secret\n     * @param maker Address of the maker (Ethereum initiator)\n     * @param timelock Duration before cancellation is allowed\n     */\n    function createNativeSwap(\n        bytes32 swapId,\n        bytes32 secretHash,\n        address payable maker,\n        uint256 timelock\n    ) external payable {\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\n        if (msg.value == 0) revert InvalidAmount();\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\n        if (timelock > MAX_TIMELOCK) revert TimelockTooLong();\n\n        uint256 unlockTime = block.timestamp + timelock;\n\n        // Store swap - msg.value is the DOT amount\n        swaps[swapId] = Swap({\n            secretHash: secretHash,\n            maker: maker,\n            taker: payable(msg.sender),\n            token: IERC20(address(0)), // Native token\n            amount: msg.value,\n            safetyDeposit: 0,\n            unlockTime: unlockTime,\n            state: SwapState.OPEN,\n            swapId: swapId,\n            isNative: true\n        });\n\n        emit SwapCreated(swapId, secretHash, maker, msg.sender, address(0), msg.value, unlockTime);\n    }\n\n    /**\n     * @notice Complete a swap by revealing the secret\n     * @param swapId Unique swap identifier\n     * @param secret Preimage of secretHash\n     * @param target Address to receive the tokens\n     * @dev Only the maker (original initiator on Ethereum) can claim to prevent front-running\n     */\n    function completeSwap(bytes32 swapId, bytes32 secret, address target) external nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\n        if (keccak256(abi.encodePacked(secret)) != swap.secretHash) revert InvalidSecret();\n        if (msg.sender != swap.maker) revert Unauthorized();\n\n        // CEI Pattern: Update state before external calls\n        swap.state = SwapState.COMPLETED;\n        bool isNative = swap.isNative;\n        IERC20 token = swap.token;\n        uint256 amount = swap.amount;\n        uint256 deposit = swap.safetyDeposit;\n\n        // Transfer tokens or native DOT to target\n        if (isNative) {\n            // Native DOT transfer\n            (bool success, ) = payable(target).call{value: amount}(\"\");\n            if (!success) revert TransferFailed();\n        } else {\n            // ERC20 token transfer\n            token.safeTransfer(target, amount);\n\n            // Return safety deposit to caller\n            if (deposit > 0) {\n                (bool success, ) = msg.sender.call{value: deposit}(\"\");\n                if (!success) revert TransferFailed();\n            }\n        }\n\n        emit SwapCompleted(swapId, secret);\n    }\n\n    /**\n     * @notice Cancel a swap after timelock expires\n     * @param swapId Unique swap identifier\n     */\n    function cancelSwap(bytes32 swapId) external nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\n        if (msg.sender != swap.taker) revert Unauthorized();\n\n        // CEI Pattern: Update state before external calls\n        swap.state = SwapState.CANCELLED;\n        bool isNative = swap.isNative;\n        IERC20 token = swap.token;\n        uint256 amount = swap.amount;\n        uint256 deposit = swap.safetyDeposit;\n        address payable taker = swap.taker;\n\n        // Return tokens or native DOT to taker\n        if (isNative) {\n            // Return native DOT\n            (bool success, ) = taker.call{value: amount}(\"\");\n            if (!success) revert TransferFailed();\n        } else {\n            // Return ERC20 tokens\n            token.safeTransfer(taker, amount);\n\n            // Return safety deposit\n            if (deposit > 0) {\n                (bool success, ) = msg.sender.call{value: deposit}(\"\");\n                if (!success) revert TransferFailed();\n            }\n        }\n\n        emit SwapCancelled(swapId);\n    }\n\n    /**\n     * @notice Public cancellation function (for access token holders)\n     * @param swapId Unique swap identifier\n     */\n    function publicCancelSwap(bytes32 swapId) external onlyAccessTokenHolder() nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\n\n        // CEI Pattern: Update state before external calls\n        swap.state = SwapState.CANCELLED;\n        bool isNative = swap.isNative;\n        IERC20 token = swap.token;\n        uint256 amount = swap.amount;\n        uint256 deposit = swap.safetyDeposit;\n        address payable taker = swap.taker;\n\n        // Return tokens or native DOT to taker\n        if (isNative) {\n            // Return native DOT\n            (bool success, ) = taker.call{value: amount}(\"\");\n            if (!success) revert TransferFailed();\n        } else {\n            // Return ERC20 tokens\n            token.safeTransfer(taker, amount);\n\n            // Return safety deposit\n            if (deposit > 0) {\n                (bool success, ) = msg.sender.call{value: deposit}(\"\");\n                if (!success) revert TransferFailed();\n            }\n        }\n\n        emit SwapCancelled(swapId);\n    }\n\n    /**\n     * @notice Rescue funds from a swap after rescue delay\n     * @param swapId Unique swap identifier\n     */\n    function rescueFunds(bytes32 swapId) external onlyOwner nonReentrant {\n        Swap storage swap = swaps[swapId];\n\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\n        if (swap.state == SwapState.COMPLETED) revert SwapNotOpen();\n        if (block.timestamp < swap.unlockTime + rescueDelay) revert TimelockNotExpired();\n\n        // CEI Pattern: Update state before external calls\n        bool isNative = swap.isNative;\n        IERC20 token = swap.token;\n        uint256 amount = swap.amount;\n        swap.state = SwapState.CANCELLED;\n        swap.amount = 0; // Prevent double-rescue\n\n        // Transfer tokens or native DOT to owner\n        if (isNative) {\n            (bool success, ) = owner.call{value: amount}(\"\");\n            if (!success) revert TransferFailed();\n        } else {\n            token.safeTransfer(owner, amount);\n        }\n\n        emit FundsRescued(swapId, address(token), amount);\n    }\n\n    /**\n     * @notice Get swap details\n     * @param swapId Unique swap identifier\n     * @return swap Full swap struct\n     */\n    function getSwap(bytes32 swapId) external view returns (Swap memory swap) {\n        return swaps[swapId];\n    }\n\n    /**\n     * @notice Check if swap can be cancelled\n     * @param swapId Unique swap identifier\n     * @return canCancel True if timelock expired and swap is still open\n     */\n    function canCancel(bytes32 swapId) external view returns (bool) {\n        Swap storage swap = swaps[swapId];\n        return swap.state == SwapState.OPEN && block.timestamp >= swap.unlockTime;\n    }\n\n    /**\n     * @notice Check if secret is valid for a swap\n     * @param swapId Unique swap identifier\n     * @param secret Preimage to test\n     * @return isValid True if secret matches secretHash\n     */\n    function isValidSecret(bytes32 swapId, bytes32 secret) external view returns (bool) {\n        return keccak256(abi.encodePacked(secret)) == swaps[swapId].secretHash;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════\n    //                        XCM BRIDGE COMPATIBILITY\n    // ═══════════════════════════════════════════════════════════════════\n\n    /**\n     * @notice Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)\n     * @param swapId Unique swap identifier (from Ethereum)\n     * @param secretHash Hash of the secret\n     * @param receiver Receiver address on Polkadot\n     * @param amount Amount to lock\n     * @param ethereumSender Original sender on Ethereum\n     * @dev Called by the XCM bridge contract for backward compatibility\n     */\n    function receiveSwap(\n        bytes32 swapId,\n        bytes32 secretHash,\n        address payable receiver,\n        uint256 amount,\n        bytes32 ethereumSender\n    ) external payable {\n        // This is a compatibility method for the XCM Bridge\n        // In a real implementation, this would need to be adapted to work with\n        // the new simplified pattern or the XCM Bridge would need to be updated\n        // For now, we'll just accept the call but not store the swap data\n        // as the new pattern uses individual parameters instead of Immutables\n        \n        // Emit an event for tracking\n        emit SwapCompleted(swapId, secretHash);\n    }\n\n    /**\n     * @dev Fallback function to accept native tokens\n     */\n    receive() external payable {}\n}\n\n"
    },
    "contracts/XCMBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {DotFusionPolkadotEscrow} from \"./PolkadotEscrow.sol\";\n\n/**\n * @title DotFusion XCM Bridge\n * @notice Bridge coordinator using XCM Precompile for cross-chain messaging\n * @dev Integrates with Polkadot's XCM Precompile and 1inch cross-chain-swap system\n */\ncontract DotFusionXCMBridge {\n    \n    address public owner;\n    DotFusionPolkadotEscrow public escrow;\n    \n    // XCM Precompile address on Polkadot Asset Hub\n    // This is the standard XCM precompile address for Polkadot Asset Hub\n    address public constant XCM_PRECOMPILE = 0x0000000000000000000000000000000000000804;\n    \n    event MessageReceived(\n        bytes32 indexed swapId,\n        bytes32 indexed secretHash,\n        address receiver,\n        uint256 amount\n    );\n    \n    event MessageSent(\n        bytes32 indexed swapId,\n        bytes32 secret\n    );\n    \n    event BridgeDeployed(\n        address indexed escrowAddress,\n        address indexed xcmPrecompileAddress\n    );\n    \n    error Unauthorized();\n    error InvalidAddress();\n    error EscrowNotSet();\n    \n    modifier onlyOwner() {\n        if (msg.sender != owner) revert Unauthorized();\n        _;\n    }\n    \n    constructor() {\n        owner = msg.sender;\n        emit BridgeDeployed(address(0), XCM_PRECOMPILE);\n    }\n    \n    function setEscrow(address _escrow) external onlyOwner {\n        if (_escrow == address(0)) revert InvalidAddress();\n        escrow = DotFusionPolkadotEscrow(payable(_escrow));\n    }\n    \n    /**\n     * @notice Receive cross-chain message from Ethereum\n     * @param swapId Unique swap identifier from Ethereum\n     * @param secretHash Hash of the secret\n     * @param receiver Receiver address on Polkadot\n     * @param ethereumSender Original sender on Ethereum\n     */\n    function receiveFromEthereum(\n        bytes32 swapId,\n        bytes32 secretHash,\n        address payable receiver,\n        bytes32 ethereumSender\n    ) external payable {\n        if (address(escrow) == address(0)) revert EscrowNotSet();\n        \n        // Forward to escrow with value\n        escrow.receiveSwap{value: msg.value}(\n            swapId,\n            secretHash,\n            receiver,\n            msg.value,\n            ethereumSender\n        );\n        \n        emit MessageReceived(swapId, secretHash, receiver, msg.value);\n    }\n    \n    /**\n     * @notice Send message back to Ethereum when swap is completed\n     * @param swapId Swap identifier\n     * @param secret Revealed secret\n     * @dev This function uses the XCM Precompile to send cross-chain messages\n     * Note: In production, this requires proper XCM configuration and sufficient fees\n     */\n    function sendToEthereum(\n        bytes32 swapId,\n        bytes32 secret\n    ) external payable {\n        // Prepare XCM message payload\n        // Format: [swapId, secret]\n        bytes memory payload = abi.encode(swapId, secret);\n\n        // Call XCM Precompile to send message\n        // The precompile interface typically accepts:\n        // - destination: ParaId or Location\n        // - beneficiary: Account on destination\n        // - assets: Tokens to transfer\n        // - feeAssetItem: Index of fee asset\n        // - weight: Computational weight limit\n\n        // Note: This is a simplified implementation. In production:\n        // 1. Configure proper XCM destination (Ethereum parachain ID)\n        // 2. Set appropriate weight limits\n        // 3. Handle fee payment\n        // 4. Add proper error handling\n\n        (bool success, ) = XCM_PRECOMPILE.call{value: msg.value}(payload);\n        require(success, \"XCM message failed\");\n\n        emit MessageSent(swapId, secret);\n    }\n    \n    /**\n     * @notice Receive ETH for XCM fees\n     */\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}