{
  "address": "0x418eE7f4c98c37a408db9426302beACa862D7731",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EscrowNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "xcmPrecompileAddress",
          "type": "address"
        }
      ],
      "name": "BridgeDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "XCM_PRECOMPILE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract DotFusionPolkadotEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secretHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ethereumSender",
          "type": "bytes32"
        }
      ],
      "name": "receiveFromEthereum",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "swapId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "sendToEthereum",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "setEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf2493ebb76d0943d6d0b88e1d5e2be574b220d5937cc914b771b10c9fee038df",
  "receipt": {
    "to": null,
    "from": "0x62206414DdE41446A0fa8eF6c6e93b9AAd9413ab",
    "contractAddress": "0x418eE7f4c98c37a408db9426302beACa862D7731",
    "transactionIndex": 2,
    "gasUsed": "1424695550",
    "logsBloom": "0x
    "blockHash": "0x351ee7adb6585c115383b94a4aef7f7f26ecee21d89e95c00493c0b142f3223d",
    "transactionHash": "0xf2493ebb76d0943d6d0b88e1d5e2be574b220d5937cc914b771b10c9fee038df",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 1814162,
        "transactionHash": "0xf2493ebb76d0943d6d0b88e1d5e2be574b220d5937cc914b771b10c9fee038df",
        "address": "0x418eE7f4c98c37a408db9426302beACa862D7731",
        "topics": [
          "0xb4517e0fc228994c47e66a2286df4a4f1afadb1f8a5865d579c2189b3092e741",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000804"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x351ee7adb6585c115383b94a4aef7f7f26ecee21d89e95c00493c0b142f3223d"
      }
    ],
    "blockNumber": 1814162,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "dbfca1611b09867b84658bcd78df6965",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EscrowNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"xcmPrecompileAddress\",\"type\":\"address\"}],\"name\":\"BridgeDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"XCM_PRECOMPILE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract DotFusionPolkadotEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ethereumSender\",\"type\":\"bytes32\"}],\"name\":\"receiveFromEthereum\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"sendToEthereum\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"setEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Integrates with Polkadot's XCM Precompile and 1inch cross-chain-swap system\",\"kind\":\"dev\",\"methods\":{\"receiveFromEthereum(bytes32,bytes32,address,bytes32)\":{\"params\":{\"ethereumSender\":\"Original sender on Ethereum\",\"receiver\":\"Receiver address on Polkadot\",\"secretHash\":\"Hash of the secret\",\"swapId\":\"Unique swap identifier from Ethereum\"}},\"sendToEthereum(bytes32,bytes32)\":{\"details\":\"This function uses the XCM Precompile to send cross-chain messages Note: In production, this requires proper XCM configuration and sufficient fees\",\"params\":{\"secret\":\"Revealed secret\",\"swapId\":\"Swap identifier\"}}},\"title\":\"DotFusion XCM Bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveFromEthereum(bytes32,bytes32,address,bytes32)\":{\"notice\":\"Receive cross-chain message from Ethereum\"},\"sendToEthereum(bytes32,bytes32)\":{\"notice\":\"Send message back to Ethereum when swap is completed\"}},\"notice\":\"Bridge coordinator using XCM Precompile for cross-chain messaging\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/XCMBridge.sol\":\"DotFusionXCMBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/PolkadotEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title DotFusion Polkadot Escrow (Destination)\\n * @notice Destination escrow contract for cross-chain atomic swaps on Polkadot\\n * @dev This contract handles multiple swaps simultaneously. Each swap is identified by a unique swapId.\\n * Funds are locked when users initiate swaps, and unlocked when secrets are revealed.\\n * @custom:security-contact security@dotfusion.io\\n */\\ncontract DotFusionPolkadotEscrow is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                              TYPES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    \\n    enum SwapState {\\n        INVALID,\\n        OPEN,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n    \\n    struct Swap {\\n        bytes32 secretHash;           // Hash of the secret (preimage)\\n        address payable maker;        // User who initiated the swap\\n        address payable taker;        // User who will complete the swap\\n        IERC20 token;                 // Token being swapped (address(0) for native DOT)\\n        uint256 amount;               // Amount of tokens or native DOT\\n        uint256 safetyDeposit;        // ETH safety deposit (unused for native DOT swaps)\\n        uint256 unlockTime;           // When swap can be cancelled\\n        SwapState state;              // Current swap state\\n        bytes32 swapId;               // Unique swap identifier\\n        bool isNative;                // True if this is a native DOT swap\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            STORAGE\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    mapping(bytes32 => Swap) public swaps;\\n\\n    // Owner and rescue delays\\n    address public immutable owner;\\n    uint32 public immutable rescueDelay;\\n    IERC20 public immutable accessToken;\\n\\n    // Maximum timelock to ensure T_dot < T_eth (recommended: 6 hours)\\n    // This ensures the Polkadot side expires before Ethereum side\\n    uint256 public constant MAX_TIMELOCK = 6 hours;\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event SwapCreated(\\n        bytes32 indexed swapId,\\n        bytes32 indexed secretHash,\\n        address indexed maker,\\n        address taker,\\n        address token,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n    \\n    event SwapCompleted(\\n        bytes32 indexed swapId,\\n        bytes32 secret\\n    );\\n    \\n    event SwapCancelled(\\n        bytes32 indexed swapId\\n    );\\n    \\n    event FundsRescued(\\n        bytes32 indexed swapId,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    error SwapAlreadyExists();\\n    error SwapDoesNotExist();\\n    error InvalidSecretHash();\\n    error InvalidAmount();\\n    error InvalidSecret();\\n    error SwapNotOpen();\\n    error TimelockNotExpired();\\n    error Unauthorized();\\n    error TransferFailed();\\n    error InvalidParameters();\\n    error TimelockTooLong();\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                            MODIFIERS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n\\n    modifier onlyAccessTokenHolder() {\\n        if (address(accessToken) != address(0) && accessToken.balanceOf(msg.sender) == 0) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                          CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    constructor(uint32 _rescueDelay, IERC20 _accessToken) {\\n        owner = msg.sender;\\n        rescueDelay = _rescueDelay;\\n        accessToken = _accessToken;\\n    }\\n    \\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        EXTERNAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Create a new swap with ERC20 tokens\\n     * @param swapId Unique identifier for this swap\\n     * @param secretHash Hash of the secret\\n     * @param maker Address of the maker\\n     * @param token Token to be swapped\\n     * @param amount Amount of tokens\\n     * @param timelock Duration before cancellation is allowed\\n     */\\n    function createSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable maker,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 timelock\\n    ) external payable {\\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\\n        if (amount == 0) revert InvalidAmount();\\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\\n        if (address(token) == address(0)) revert InvalidParameters();\\n        if (timelock > MAX_TIMELOCK) revert TimelockTooLong();\\n\\n        // Transfer tokens from taker to this contract\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 unlockTime = block.timestamp + timelock;\\n\\n        // Store swap\\n        swaps[swapId] = Swap({\\n            secretHash: secretHash,\\n            maker: maker,\\n            taker: payable(msg.sender),\\n            token: token,\\n            amount: amount,\\n            safetyDeposit: msg.value,\\n            unlockTime: unlockTime,\\n            state: SwapState.OPEN,\\n            swapId: swapId,\\n            isNative: false\\n        });\\n\\n        emit SwapCreated(swapId, secretHash, maker, msg.sender, address(token), amount, unlockTime);\\n    }\\n\\n    /**\\n     * @notice Create a new swap with native DOT\\n     * @param swapId Unique identifier for this swap\\n     * @param secretHash Hash of the secret\\n     * @param maker Address of the maker (Ethereum initiator)\\n     * @param timelock Duration before cancellation is allowed\\n     */\\n    function createNativeSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable maker,\\n        uint256 timelock\\n    ) external payable {\\n        if (secretHash == bytes32(0)) revert InvalidSecretHash();\\n        if (msg.value == 0) revert InvalidAmount();\\n        if (swaps[swapId].state != SwapState.INVALID) revert SwapAlreadyExists();\\n        if (timelock > MAX_TIMELOCK) revert TimelockTooLong();\\n\\n        uint256 unlockTime = block.timestamp + timelock;\\n\\n        // Store swap - msg.value is the DOT amount\\n        swaps[swapId] = Swap({\\n            secretHash: secretHash,\\n            maker: maker,\\n            taker: payable(msg.sender),\\n            token: IERC20(address(0)), // Native token\\n            amount: msg.value,\\n            safetyDeposit: 0,\\n            unlockTime: unlockTime,\\n            state: SwapState.OPEN,\\n            swapId: swapId,\\n            isNative: true\\n        });\\n\\n        emit SwapCreated(swapId, secretHash, maker, msg.sender, address(0), msg.value, unlockTime);\\n    }\\n\\n    /**\\n     * @notice Complete a swap by revealing the secret\\n     * @param swapId Unique swap identifier\\n     * @param secret Preimage of secretHash\\n     * @param target Address to receive the tokens\\n     * @dev Only the maker (original initiator on Ethereum) can claim to prevent front-running\\n     */\\n    function completeSwap(bytes32 swapId, bytes32 secret, address target) external nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (keccak256(abi.encodePacked(secret)) != swap.secretHash) revert InvalidSecret();\\n        if (msg.sender != swap.maker) revert Unauthorized();\\n\\n        // CEI Pattern: Update state before external calls\\n        swap.state = SwapState.COMPLETED;\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        uint256 deposit = swap.safetyDeposit;\\n\\n        // Transfer tokens or native DOT to target\\n        if (isNative) {\\n            // Native DOT transfer\\n            (bool success, ) = payable(target).call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            // ERC20 token transfer\\n            token.safeTransfer(target, amount);\\n\\n            // Return safety deposit to caller\\n            if (deposit > 0) {\\n                (bool success, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n        }\\n\\n        emit SwapCompleted(swapId, secret);\\n    }\\n\\n    /**\\n     * @notice Cancel a swap after timelock expires\\n     * @param swapId Unique swap identifier\\n     */\\n    function cancelSwap(bytes32 swapId) external nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\\n        if (msg.sender != swap.taker) revert Unauthorized();\\n\\n        // CEI Pattern: Update state before external calls\\n        swap.state = SwapState.CANCELLED;\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        uint256 deposit = swap.safetyDeposit;\\n        address payable taker = swap.taker;\\n\\n        // Return tokens or native DOT to taker\\n        if (isNative) {\\n            // Return native DOT\\n            (bool success, ) = taker.call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            // Return ERC20 tokens\\n            token.safeTransfer(taker, amount);\\n\\n            // Return safety deposit\\n            if (deposit > 0) {\\n                (bool success, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n        }\\n\\n        emit SwapCancelled(swapId);\\n    }\\n\\n    /**\\n     * @notice Public cancellation function (for access token holders)\\n     * @param swapId Unique swap identifier\\n     */\\n    function publicCancelSwap(bytes32 swapId) external onlyAccessTokenHolder() nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state != SwapState.OPEN) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime) revert TimelockNotExpired();\\n\\n        // CEI Pattern: Update state before external calls\\n        swap.state = SwapState.CANCELLED;\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        uint256 deposit = swap.safetyDeposit;\\n        address payable taker = swap.taker;\\n\\n        // Return tokens or native DOT to taker\\n        if (isNative) {\\n            // Return native DOT\\n            (bool success, ) = taker.call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            // Return ERC20 tokens\\n            token.safeTransfer(taker, amount);\\n\\n            // Return safety deposit\\n            if (deposit > 0) {\\n                (bool success, ) = msg.sender.call{value: deposit}(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n        }\\n\\n        emit SwapCancelled(swapId);\\n    }\\n\\n    /**\\n     * @notice Rescue funds from a swap after rescue delay\\n     * @param swapId Unique swap identifier\\n     */\\n    function rescueFunds(bytes32 swapId) external onlyOwner nonReentrant {\\n        Swap storage swap = swaps[swapId];\\n\\n        if (swap.state == SwapState.INVALID) revert SwapDoesNotExist();\\n        if (swap.state == SwapState.COMPLETED) revert SwapNotOpen();\\n        if (block.timestamp < swap.unlockTime + rescueDelay) revert TimelockNotExpired();\\n\\n        // CEI Pattern: Update state before external calls\\n        bool isNative = swap.isNative;\\n        IERC20 token = swap.token;\\n        uint256 amount = swap.amount;\\n        swap.state = SwapState.CANCELLED;\\n        swap.amount = 0; // Prevent double-rescue\\n\\n        // Transfer tokens or native DOT to owner\\n        if (isNative) {\\n            (bool success, ) = owner.call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            token.safeTransfer(owner, amount);\\n        }\\n\\n        emit FundsRescued(swapId, address(token), amount);\\n    }\\n\\n    /**\\n     * @notice Get swap details\\n     * @param swapId Unique swap identifier\\n     * @return swap Full swap struct\\n     */\\n    function getSwap(bytes32 swapId) external view returns (Swap memory swap) {\\n        return swaps[swapId];\\n    }\\n\\n    /**\\n     * @notice Check if swap can be cancelled\\n     * @param swapId Unique swap identifier\\n     * @return canCancel True if timelock expired and swap is still open\\n     */\\n    function canCancel(bytes32 swapId) external view returns (bool) {\\n        Swap storage swap = swaps[swapId];\\n        return swap.state == SwapState.OPEN && block.timestamp >= swap.unlockTime;\\n    }\\n\\n    /**\\n     * @notice Check if secret is valid for a swap\\n     * @param swapId Unique swap identifier\\n     * @param secret Preimage to test\\n     * @return isValid True if secret matches secretHash\\n     */\\n    function isValidSecret(bytes32 swapId, bytes32 secret) external view returns (bool) {\\n        return keccak256(abi.encodePacked(secret)) == swaps[swapId].secretHash;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    //                        XCM BRIDGE COMPATIBILITY\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @notice Receive a cross-chain swap message from Ethereum (XCM Bridge compatibility)\\n     * @param swapId Unique swap identifier (from Ethereum)\\n     * @param secretHash Hash of the secret\\n     * @dev Called by the XCM bridge contract for backward compatibility\\n     * @dev Other parameters are present for compatibility but not used\\n     */\\n    function receiveSwap(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable /* receiver */,\\n        uint256 /* amount */,\\n        bytes32 /* ethereumSender */\\n    ) external payable {\\n        // This is a compatibility method for the XCM Bridge\\n        // In a real implementation, this would need to be adapted to work with\\n        // the new simplified pattern or the XCM Bridge would need to be updated\\n        // For now, we'll just accept the call but not store the swap data\\n        // as the new pattern uses individual parameters instead of Immutables\\n\\n        // Emit an event for tracking\\n        emit SwapCompleted(swapId, secretHash);\\n    }\\n\\n    /**\\n     * @dev Fallback function to accept native tokens\\n     */\\n    receive() external payable {}\\n}\\n\\n\",\"keccak256\":\"0xdf8d0c4dad0ebe32548881c922e39a3abe9b5d5a48a3d2cb9e75c3005177795f\",\"license\":\"MIT\"},\"contracts/XCMBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {DotFusionPolkadotEscrow} from \\\"./PolkadotEscrow.sol\\\";\\n\\n/**\\n * @title DotFusion XCM Bridge\\n * @notice Bridge coordinator using XCM Precompile for cross-chain messaging\\n * @dev Integrates with Polkadot's XCM Precompile and 1inch cross-chain-swap system\\n */\\ncontract DotFusionXCMBridge {\\n    \\n    address public owner;\\n    DotFusionPolkadotEscrow public escrow;\\n    \\n    // XCM Precompile address on Polkadot Asset Hub\\n    // This is the standard XCM precompile address for Polkadot Asset Hub\\n    address public constant XCM_PRECOMPILE = 0x0000000000000000000000000000000000000804;\\n    \\n    event MessageReceived(\\n        bytes32 indexed swapId,\\n        bytes32 indexed secretHash,\\n        address receiver,\\n        uint256 amount\\n    );\\n    \\n    event MessageSent(\\n        bytes32 indexed swapId,\\n        bytes32 secret\\n    );\\n    \\n    event BridgeDeployed(\\n        address indexed escrowAddress,\\n        address indexed xcmPrecompileAddress\\n    );\\n    \\n    error Unauthorized();\\n    error InvalidAddress();\\n    error EscrowNotSet();\\n    \\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n    \\n    constructor() {\\n        owner = msg.sender;\\n        emit BridgeDeployed(address(0), XCM_PRECOMPILE);\\n    }\\n    \\n    function setEscrow(address _escrow) external onlyOwner {\\n        if (_escrow == address(0)) revert InvalidAddress();\\n        escrow = DotFusionPolkadotEscrow(payable(_escrow));\\n    }\\n    \\n    /**\\n     * @notice Receive cross-chain message from Ethereum\\n     * @param swapId Unique swap identifier from Ethereum\\n     * @param secretHash Hash of the secret\\n     * @param receiver Receiver address on Polkadot\\n     * @param ethereumSender Original sender on Ethereum\\n     */\\n    function receiveFromEthereum(\\n        bytes32 swapId,\\n        bytes32 secretHash,\\n        address payable receiver,\\n        bytes32 ethereumSender\\n    ) external payable {\\n        if (address(escrow) == address(0)) revert EscrowNotSet();\\n        \\n        // Forward to escrow with value\\n        escrow.receiveSwap{value: msg.value}(\\n            swapId,\\n            secretHash,\\n            receiver,\\n            msg.value,\\n            ethereumSender\\n        );\\n        \\n        emit MessageReceived(swapId, secretHash, receiver, msg.value);\\n    }\\n    \\n    /**\\n     * @notice Send message back to Ethereum when swap is completed\\n     * @param swapId Swap identifier\\n     * @param secret Revealed secret\\n     * @dev This function uses the XCM Precompile to send cross-chain messages\\n     * Note: In production, this requires proper XCM configuration and sufficient fees\\n     */\\n    function sendToEthereum(\\n        bytes32 swapId,\\n        bytes32 secret\\n    ) external payable {\\n        // Prepare XCM message payload\\n        // Format: [swapId, secret]\\n        bytes memory payload = abi.encode(swapId, secret);\\n\\n        // Call XCM Precompile to send message\\n        // The precompile interface typically accepts:\\n        // - destination: ParaId or Location\\n        // - beneficiary: Account on destination\\n        // - assets: Tokens to transfer\\n        // - feeAssetItem: Index of fee asset\\n        // - weight: Computational weight limit\\n\\n        // Note: This is a simplified implementation. In production:\\n        // 1. Configure proper XCM destination (Ethereum parachain ID)\\n        // 2. Set appropriate weight limits\\n        // 3. Handle fee payment\\n        // 4. Add proper error handling\\n\\n        (bool success, ) = XCM_PRECOMPILE.call{value: msg.value}(payload);\\n        require(success, \\\"XCM message failed\\\");\\n\\n        emit MessageSent(swapId, secret);\\n    }\\n    \\n    /**\\n     * @notice Receive ETH for XCM fees\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd32d9fe2193538bc0d375f80277b79bfec58f0b136d3448bbd8c97d1817b03a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317815560405161080491907fb4517e0fc228994c47e66a2286df4a4f1afadb1f8a5865d579c2189b3092e741908290a36104878061005f6000396000f3fe6080604052600436106100595760003560e01c8063077120cc146100655780638da5cb5b14610097578063c10c3546146100b7578063c782055e146100d9578063e2fdcc17146100ec578063f3ce326f1461010c57600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061007b61080481565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a357600080fd5b5060005461007b906001600160a01b031681565b3480156100c357600080fd5b506100d76100d236600461039d565b61011f565b005b6100d76100e73660046103c1565b610192565b3480156100f857600080fd5b5060015461007b906001600160a01b031681565b6100d761011a366004610400565b610281565b6000546001600160a01b03163314610149576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166101705760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03166101bb57604051634eca2d6760e01b815260040160405180910390fd5b600154604051638fc9fef160e01b815260048101869052602481018590526001600160a01b038481166044830152346064830181905260848301859052921691638fc9fef19160a4016000604051808303818588803b15801561021d57600080fd5b505af1158015610231573d6000803e3d6000fd5b5050604080516001600160a01b03871681523460208201528794508893507f74067246a35113666e7ea609db47ec0bceb8b77773497b430ca621d33584774f92500160405180910390a350505050565b6040805160208101849052808201839052815180820383018152606090910191829052906000906108049034906102b9908590610422565b60006040518083038185875af1925050503d80600081146102f6576040519150601f19603f3d011682016040523d82523d6000602084013e6102fb565b606091505b50509050806103455760405162461bcd60e51b81526020600482015260126024820152711610d3481b595cdcd859d94819985a5b195960721b604482015260640160405180910390fd5b837f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b23728460405161037791815260200190565b60405180910390a250505050565b6001600160a01b038116811461039a57600080fd5b50565b6000602082840312156103af57600080fd5b81356103ba81610385565b9392505050565b600080600080608085870312156103d757600080fd5b843593506020850135925060408501356103f081610385565b9396929550929360600135925050565b6000806040838503121561041357600080fd5b50508035926020909101359150565b6000825160005b818110156104435760208186018101518583015201610429565b50600092019182525091905056fea26469706673582212202d487bf8c6097bc9b4c3b80c7c8b1859829819249e0f68cbf6a0d29acded492e64736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c8063077120cc146100655780638da5cb5b14610097578063c10c3546146100b7578063c782055e146100d9578063e2fdcc17146100ec578063f3ce326f1461010c57600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061007b61080481565b6040516001600160a01b03909116815260200160405180910390f35b3480156100a357600080fd5b5060005461007b906001600160a01b031681565b3480156100c357600080fd5b506100d76100d236600461039d565b61011f565b005b6100d76100e73660046103c1565b610192565b3480156100f857600080fd5b5060015461007b906001600160a01b031681565b6100d761011a366004610400565b610281565b6000546001600160a01b03163314610149576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166101705760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03166101bb57604051634eca2d6760e01b815260040160405180910390fd5b600154604051638fc9fef160e01b815260048101869052602481018590526001600160a01b038481166044830152346064830181905260848301859052921691638fc9fef19160a4016000604051808303818588803b15801561021d57600080fd5b505af1158015610231573d6000803e3d6000fd5b5050604080516001600160a01b03871681523460208201528794508893507f74067246a35113666e7ea609db47ec0bceb8b77773497b430ca621d33584774f92500160405180910390a350505050565b6040805160208101849052808201839052815180820383018152606090910191829052906000906108049034906102b9908590610422565b60006040518083038185875af1925050503d80600081146102f6576040519150601f19603f3d011682016040523d82523d6000602084013e6102fb565b606091505b50509050806103455760405162461bcd60e51b81526020600482015260126024820152711610d3481b595cdcd859d94819985a5b195960721b604482015260640160405180910390fd5b837f9102b9031c3c59d8320bf14d84d7d7a3434366b91032fad1c87579cfc62b23728460405161037791815260200190565b60405180910390a250505050565b6001600160a01b038116811461039a57600080fd5b50565b6000602082840312156103af57600080fd5b81356103ba81610385565b9392505050565b600080600080608085870312156103d757600080fd5b843593506020850135925060408501356103f081610385565b9396929550929360600135925050565b6000806040838503121561041357600080fd5b50508035926020909101359150565b6000825160005b818110156104435760208186018101518583015201610429565b50600092019182525091905056fea26469706673582212202d487bf8c6097bc9b4c3b80c7c8b1859829819249e0f68cbf6a0d29acded492e64736f6c63430008170033",
  "devdoc": {
    "details": "Integrates with Polkadot's XCM Precompile and 1inch cross-chain-swap system",
    "kind": "dev",
    "methods": {
      "receiveFromEthereum(bytes32,bytes32,address,bytes32)": {
        "params": {
          "ethereumSender": "Original sender on Ethereum",
          "receiver": "Receiver address on Polkadot",
          "secretHash": "Hash of the secret",
          "swapId": "Unique swap identifier from Ethereum"
        }
      },
      "sendToEthereum(bytes32,bytes32)": {
        "details": "This function uses the XCM Precompile to send cross-chain messages Note: In production, this requires proper XCM configuration and sufficient fees",
        "params": {
          "secret": "Revealed secret",
          "swapId": "Swap identifier"
        }
      }
    },
    "title": "DotFusion XCM Bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveFromEthereum(bytes32,bytes32,address,bytes32)": {
        "notice": "Receive cross-chain message from Ethereum"
      },
      "sendToEthereum(bytes32,bytes32)": {
        "notice": "Send message back to Ethereum when swap is completed"
      }
    },
    "notice": "Bridge coordinator using XCM Precompile for cross-chain messaging",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1737,
        "contract": "contracts/XCMBridge.sol:DotFusionXCMBridge",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1740,
        "contract": "contracts/XCMBridge.sol:DotFusionXCMBridge",
        "label": "escrow",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DotFusionPolkadotEscrow)1730"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(DotFusionPolkadotEscrow)1730": {
        "encoding": "inplace",
        "label": "contract DotFusionPolkadotEscrow",
        "numberOfBytes": "20"
      }
    }
  }
}